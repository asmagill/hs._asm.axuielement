[
  {
    "Constant" : [
      {
        "doc" : "A table of common accessibility object attribute names which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as keys in the match criteria argument.\n\nNotes:\n * This table is provided for reference only and is not intended to be comprehensive.\n * You can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.attributes`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object attribute names which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as keys in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.attributes[]",
        "notes" : [
          " * This table is provided for reference only and is not intended to be comprehensive.",
          " * You can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.attributes`"
        ],
        "signature" : "hs.axuielement.attributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object attribute names which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as keys in the match criteria argument.",
        "name" : "attributes"
      },
      {
        "doc" : "A table of common accessibility object parameterized attribute names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.parameterizedAttributes`\n * Parameterized attributes are attributes that take an argument when querying the element. There is very little documentation available for most of these and application developers can implement their own for which we may never be able to get any documentation. This table contains parameterized attribute names that are defined within the Apple documentation and a few others that have been discovered.\n * Documentation covering what has been discovered through experimentation about paramterized attributes is planned and should be added to the Hammerspoon wiki shortly after this module becomes part of a formal release.",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object parameterized attribute names, provided for reference.",
          ""
        ],
        "def" : "hs.axuielement.parameterizedAttributes[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.parameterizedAttributes`",
          " * Parameterized attributes are attributes that take an argument when querying the element. There is very little documentation available for most of these and application developers can implement their own for which we may never be able to get any documentation. This table contains parameterized attribute names that are defined within the Apple documentation and a few others that have been discovered.",
          " * Documentation covering what has been discovered through experimentation about paramterized attributes is planned and should be added to the Hammerspoon wiki shortly after this module becomes part of a formal release."
        ],
        "signature" : "hs.axuielement.parameterizedAttributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object parameterized attribute names, provided for reference.",
        "name" : "parameterizedAttributes"
      },
      {
        "doc" : "A table of common accessibility object action names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.actions`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object action names, provided for reference.",
          ""
        ],
        "def" : "hs.axuielement.actions[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.actions`"
        ],
        "signature" : "hs.axuielement.actions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object action names, provided for reference.",
        "name" : "actions"
      },
      {
        "doc" : "A table of common accessibility object roles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXRole\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.roles`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object roles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXRole\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.roles[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.roles`"
        ],
        "signature" : "hs.axuielement.roles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object roles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXRole\" in the match criteria argument.",
        "name" : "roles"
      },
      {
        "doc" : "A table of common accessibility object subroles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSubrole\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.subroles`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object subroles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSubrole\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.subroles[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.subroles`"
        ],
        "signature" : "hs.axuielement.subroles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object subroles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSubrole\" in the match criteria argument.",
        "name" : "subroles"
      },
      {
        "doc" : "A table of orientation types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXOrientation\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.orientations`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of orientation types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXOrientation\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.orientations[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.orientations`"
        ],
        "signature" : "hs.axuielement.orientations[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of orientation types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXOrientation\" in the match criteria argument.",
        "name" : "orientations"
      },
      {
        "doc" : "A table of sort direction types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSortDirection\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.sortDirections`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of sort direction types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSortDirection\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.sortDirections[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.sortDirections`"
        ],
        "signature" : "hs.axuielement.sortDirections[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of sort direction types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSortDirection\" in the match criteria argument.",
        "name" : "sortDirections"
      },
      {
        "doc" : "A table of ruler marker types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXMarkerType\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.rulerMarkers`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of ruler marker types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXMarkerType\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.rulerMarkers[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.rulerMarkers`"
        ],
        "signature" : "hs.axuielement.rulerMarkers[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of ruler marker types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXMarkerType\" in the match criteria argument.",
        "name" : "rulerMarkers"
      },
      {
        "doc" : "A table of measurement unit types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for attributes which specify measurement unit types (e.g. \"AXUnits\", \"AXHorizontalUnits\", and \"AXVerticalUnits\") in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.units`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of measurement unit types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for attributes which specify measurement unit types (e.g. \"AXUnits\", \"AXHorizontalUnits\", and \"AXVerticalUnits\") in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.units[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.units`"
        ],
        "signature" : "hs.axuielement.units[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of measurement unit types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for attributes which specify measurement unit types (e.g. \"AXUnits\", \"AXHorizontalUnits\", and \"AXVerticalUnits\") in the match criteria argument.",
        "name" : "units"
      }
    ],
    "submodules" : [
      "axtextmarker",
      "observer"
    ],
    "Function" : [
      {
        "doc" : "Returns a function for use with [hs.axuielement:elementSearch](#elementSearch) that uses [hs.axuielement:matchesCriteria](#matchesCriteria) with the specified criteria.\n\nParameters:\n * `criteria` - a criteria definition as defined for the [hs.axuielement:matchesCriteria](#matchesCriteria) method.\n\nReturns:\n * a function which can be used as the `criteriaFunction` for [hs.axuielement:elementSearch](#elementSearch).",
        "parameters" : [
          " * `criteria` - a criteria definition as defined for the [hs.axuielement:matchesCriteria](#matchesCriteria) method.",
          ""
        ],
        "stripped_doc" : [
          "Returns a function for use with [hs.axuielement:elementSearch](#elementSearch) that uses [hs.axuielement:matchesCriteria](#matchesCriteria) with the specified criteria.",
          ""
        ],
        "def" : "hs.axuielement.searchCriteriaFunction(criteria) -> function",
        "notes" : [

        ],
        "signature" : "hs.axuielement.searchCriteriaFunction(criteria) -> function",
        "type" : "Function",
        "returns" : [
          " * a function which can be used as the `criteriaFunction` for [hs.axuielement:elementSearch](#elementSearch)."
        ],
        "desc" : "Returns a function for use with [hs.axuielement:elementSearch](#elementSearch) that uses [hs.axuielement:matchesCriteria](#matchesCriteria) with the specified criteria.",
        "name" : "searchCriteriaFunction"
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [
      {
        "doc" : "Returns the accessibility object for the window specified by the `hs.window` object.\n\nParameters:\n * `windowObject` - the `hs.window` object for the window or a string or number which will be passed to `hs.window.find` to get an `hs.window` object.\n\nReturns:\n * an axuielementObject for the window specified\n\nNotes:\n * if `windowObject` is a string or number, only the first item found with `hs.window.find` will be used by this function to create an axuielementObject.",
        "parameters" : [
          " * `windowObject` - the `hs.window` object for the window or a string or number which will be passed to `hs.window.find` to get an `hs.window` object.",
          ""
        ],
        "stripped_doc" : [
          "Returns the accessibility object for the window specified by the `hs.window` object.",
          ""
        ],
        "def" : "hs.axuielement.windowElement(windowObject) -> axuielementObject",
        "notes" : [
          " * if `windowObject` is a string or number, only the first item found with `hs.window.find` will be used by this function to create an axuielementObject."
        ],
        "signature" : "hs.axuielement.windowElement(windowObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the window specified",
          ""
        ],
        "desc" : "Returns the accessibility object for the window specified by the `hs.window` object.",
        "name" : "windowElement"
      },
      {
        "doc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.\n\nParameters:\n * `applicationObject` - the `hs.application` object for the Application or a string or number which will be passed to `hs.application.find` to get an `hs.application` object.\n\nReturns:\n * an axuielementObject for the application specified\n\nNotes:\n * if `applicationObject` is a string or number, only the first item found with `hs.application.find` will be used by this function to create an axuielementObject.",
        "parameters" : [
          " * `applicationObject` - the `hs.application` object for the Application or a string or number which will be passed to `hs.application.find` to get an `hs.application` object.",
          ""
        ],
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
          ""
        ],
        "def" : "hs.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "notes" : [
          " * if `applicationObject` is a string or number, only the first item found with `hs.application.find` will be used by this function to create an axuielementObject."
        ],
        "signature" : "hs.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified",
          ""
        ],
        "desc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
        "name" : "applicationElement"
      },
      {
        "doc" : "Returns an accessibility object that provides access to system attributes.\n\nParameters:\n * None\n\nReturns:\n * the axuielementObject for the system attributes",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns an accessibility object that provides access to system attributes.",
          ""
        ],
        "def" : "hs.axuielement.systemWideElement() -> axuielementObject",
        "notes" : [

        ],
        "signature" : "hs.axuielement.systemWideElement() -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * the axuielementObject for the system attributes"
        ],
        "desc" : "Returns an accessibility object that provides access to system attributes.",
        "name" : "systemWideElement"
      },
      {
        "doc" : "Returns the top-level accessibility object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * an axuielementObject for the application specified, or nil if it cannot be determined",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "notes" : [

        ],
        "signature" : "hs.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified, or nil if it cannot be determined"
        ],
        "desc" : "Returns the top-level accessibility object for the application with the specified process ID.",
        "name" : "applicationElementForPID"
      },
      {
        "doc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.\n\nParameters:\n * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.\n * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.\n * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * See also [hs.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs.axuielement.systemWideElement():elementAtPosition(...)`.\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
        "parameters" : [
          " * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.",
          " * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.",
          " * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.",
          ""
        ],
        "stripped_doc" : [
          "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
          ""
        ],
        "def" : "hs.axuielement.systemElementAtPosition(x, y | pointTable) -> axuielementObject",
        "notes" : [
          " * See also [hs.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs.axuielement.systemWideElement():elementAtPosition(...)`.",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location."
        ],
        "signature" : "hs.axuielement.systemElementAtPosition(x, y | pointTable) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "desc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
        "name" : "systemElementAtPosition"
      }
    ],
    "doc" : "This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.\n\nThis module works through the use of axuielementObjects, which is the Hammerspoon representation for an accessibility object.  An accessibility object represents any object or component of an OS X application which can be manipulated through the OS X Accessibility API -- it can be an application, a window, a button, selected text, etc.  As such, it can only support those features and objects within an application that the application developers make available through the Accessibility API.\n\nIn addition to the formal methods described in this documentation, dynamic methods exist for accessing element attributes and actions. These will differ somewhat between objects as the specific attributes and actions will depend upon the accessibility object's role and purpose, but the following outlines the basics.\n\nGetting and Setting Attribute values:\n * `object.attribute` is a shortcut for `object:attributeValue(attribute)`\n * `object.attribute = value` is a shortcut for `object:setAttributeValue(attribute, value)`\n   * If detecting accessiblity errors that may occur is necessary, you must use the formal methods [hs.axuielement:attributeValue](#attributeValue) and [hs.axuielement:setAttributeValue](#setAttributeValue)\n   * Note that setting an attribute value is not guaranteeed to work with either method:\n     * internal logic within the receiving application may decline to accept the newly assigned value\n     * an accessibility error may occur\n     * the element may not be settable (surprisingly this does not return an error, even when [hs.axuielement:isAttributeSettable](#isAttributeSettable) returns false for the attribute specified)\n   * If you require confirmation of the change, you will need to check the value of the attribute with one of the methods described above after setting it.\n\nIteration over Attributes:\n * `for k,v in pairs(object) do ... end` is a shortcut for `for k,_ in ipairs(object:attributeNames()) do local v = object:attributeValue(k) ; ... end` or `for k,v in pairs(object:allAttributeValues()) do ... end` (though see note below)\n    * If detecting accessiblity errors that may occur is necessary, you must use one of the formal approaches [hs.axuielement:allAttributeValues](#allAttributeValues) or [hs.axuielement:attributeNames](#attributeNames) and [hs.axuielement:attributeValue](#attributeValue)\n   * By default, [hs.axuielement:allAttributeValues](#allAttributeValues) will not include key-value pairs for which the attribute (key) exists for the element but has no assigned value (nil) at the present time. This is because the value of `nil` prevents the key from being retained in the table returned. See [hs.axuielement:allAttributeValues](#allAttributeValues) for details and a workaround.\n\nIteration over Child Elements (AXChildren):\n * `for i,v in ipairs(object) do ... end` is a shortcut for `for i,v in pairs(object:attributeValue(\"AXChildren\") or {}) do ... end`\n   * Note that `object:attributeValue(\"AXChildren\")` *may* return nil if the object does not have the `AXChildren` attribute; the shortcut does not have this limitation.\n * `#object` is a shortcut for `#object:attributeValue(\"AXChildren\")`\n * `object[i]` is a shortcut for `object:attributeValue(\"AXChildren\")[i]`\n   * If detecting accessiblity errors that may occur is necessary, you must use the formal method [hs.axuielement:attributeValue](#attributeValue) to get the \"AXChildren\" attribute.\n\nActions ([hs.axuielement:actionNames](#actionNames)):\n * `object:do<action>()` is a shortcut for `object:performAction(action)`\n   * See [hs.axuielement:performAction](#performAction) for a description of the return values and [hs.axuielement:actionNames](#actionNames) to get a list of actions that the element supports.\n\nParameterizedAttributes:\n * `object:<attribute>WithParameter(value)` is a shortcut for `object:parameterizedAttributeValue(attribute, value)\n   * See [hs.axuielement:parameterizedAttributeValue](#parameterizedAttributeValue) for a description of the return values and [hs.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames) to get a list of parameterized values that the element supports\n\n   * The specific value required for a each parameterized attribute is different and is often application specific thus requiring some experimentation. Notes regarding identified parameter types and thoughts on some still being investigated will be provided in the Hammerspoon Wiki, hopefully shortly after this module becomes part of a Hammerspoon release.",
    "Method" : [
      {
        "doc" : "Return a duplicate userdata reference to the Accessibility object.\n\nParameters:\n * None\n\nReturns:\n * a new userdata object representing a new reference to the Accessibility object.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Return a duplicate userdata reference to the Accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:copy() -> axuielementObject",
        "notes" : [

        ],
        "signature" : "hs.axuielement:copy() -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * a new userdata object representing a new reference to the Accessibility object."
        ],
        "desc" : "Return a duplicate userdata reference to the Accessibility object.",
        "name" : "copy"
      },
      {
        "doc" : "Returns a list of all the attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred\n\nNotes:\n * Common attribute names can be found in the [hs.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a list of all the attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:attributeNames() -> table | nil, errString",
        "notes" : [
          " * Common attribute names can be found in the [hs.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs.axuielement:attributeNames() -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a list of all the attributes supported by the specified accessibility object.",
        "name" : "attributeNames"
      },
      {
        "doc" : "Returns a list of all the actions the specified accessibility object can perform.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all actions supported by the axuielementObject or nil and an error string if an accessibility error occurred\n\nNotes:\n * Common action names can be found in the [hs.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a list of all the actions the specified accessibility object can perform.",
          ""
        ],
        "def" : "hs.axuielement:actionNames() -> table | nil, errString",
        "notes" : [
          " * Common action names can be found in the [hs.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs.axuielement:actionNames() -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all actions supported by the axuielementObject or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a list of all the actions the specified accessibility object can perform.",
        "name" : "actionNames"
      },
      {
        "doc" : "Returns a localized description of the specified accessibility object's action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).\n\nReturns:\n * a string containing a description of the object's action, nil if no description is available, or nil and an error string if an accessibility error occurred\n\nNotes:\n * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers.",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns a localized description of the specified accessibility object's action.",
          ""
        ],
        "def" : "hs.axuielement:actionDescription(action) -> string | nil, errString",
        "notes" : [
          " * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers."
        ],
        "signature" : "hs.axuielement:actionDescription(action) -> string | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a string containing a description of the object's action, nil if no description is available, or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a localized description of the specified accessibility object's action.",
        "name" : "actionDescription"
      },
      {
        "doc" : "Returns the value of an accessibility object's attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the current value of the attribute, nil if the attribute has no value, or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns the value of an accessibility object's attribute.",
          ""
        ],
        "def" : "hs.axuielement:attributeValue(attribute) -> value | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:attributeValue(attribute) -> value | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the current value of the attribute, nil if the attribute has no value, or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns the value of an accessibility object's attribute.",
        "name" : "attributeValue"
      },
      {
        "doc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.\n\nParameters:\n * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.\n\nReturns:\n * a table with key-value pairs corresponding to the attributes of the accessibility object or nil and an error string if an accessibility error occurred\n\nNotes:\n * if `includeErrors` is not specified or is false, then attributes which exist for the element, but currently have no value assigned, will not appear in the table. This is because Lua treats a nil value for a table's key-value pair as an instruction to remove the key from the table, if it currently exists.\n * To include attributes which exist but are currently unset, you need to specify `includeErrors` as true.\n   * attributes for which no value is currently assigned will be given a table value with the following key-value pairs:\n     * `_code` = -25212\n     * `error` = \"Requested value does not exist\"",
        "parameters" : [
          " * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.",
          ""
        ],
        "stripped_doc" : [
          "Returns a table containing key-value pairs for all attributes of the accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:allAttributeValues([includeErrors]) -> table | nil, errString",
        "notes" : [
          " * if `includeErrors` is not specified or is false, then attributes which exist for the element, but currently have no value assigned, will not appear in the table. This is because Lua treats a nil value for a table's key-value pair as an instruction to remove the key from the table, if it currently exists.",
          " * To include attributes which exist but are currently unset, you need to specify `includeErrors` as true.",
          "   * attributes for which no value is currently assigned will be given a table value with the following key-value pairs:",
          "     * `_code` = -25212",
          "     * `error` = \"Requested value does not exist\""
        ],
        "signature" : "hs.axuielement:allAttributeValues([includeErrors]) -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a table with key-value pairs corresponding to the attributes of the accessibility object or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.",
        "name" : "allAttributeValues"
      },
      {
        "doc" : "Returns the count of the array of an accessibility object's attribute value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the number of items in the value for the attribute, if it is an array, or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns the count of the array of an accessibility object's attribute value.",
          ""
        ],
        "def" : "hs.axuielement:attributeValueCount(attribute) -> integer | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:attributeValueCount(attribute) -> integer | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the number of items in the value for the attribute, if it is an array, or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns the count of the array of an accessibility object's attribute value.",
        "name" : "attributeValueCount"
      },
      {
        "doc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all parameterized attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:parameterizedAttributeNames() -> table | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:parameterizedAttributeNames() -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all parameterized attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
        "name" : "parameterizedAttributeNames"
      },
      {
        "doc" : "Returns whether the specified accessibility object's attribute can be modified.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * a boolean value indicating whether or not the value of the parameter can be modified or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns whether the specified accessibility object's attribute can be modified.",
          ""
        ],
        "def" : "hs.axuielement:isAttributeSettable(attribute) -> boolean | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:isAttributeSettable(attribute) -> boolean | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the value of the parameter can be modified or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns whether the specified accessibility object's attribute can be modified.",
        "name" : "isAttributeSettable"
      },
      {
        "doc" : "Returns whether the specified accessibility object is still valid.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the accessibility object is still valid or nil and an error string if any other accessibility error occurred\n\nNotes:\n * an accessibilityObject can become invalid for a variety of reasons, including but not limited to the element referred to no longer being available (e.g. an element referring to a window or one of its descendants that has been closed) or the application terminating.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns whether the specified accessibility object is still valid.",
          ""
        ],
        "def" : "hs.axuielement:isValid() -> boolean | nil, errString",
        "notes" : [
          " * an accessibilityObject can become invalid for a variety of reasons, including but not limited to the element referred to no longer being available (e.g. an element referring to a window or one of its descendants that has been closed) or the application terminating."
        ],
        "signature" : "hs.axuielement:isValid() -> boolean | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the accessibility object is still valid or nil and an error string if any other accessibility error occurred",
          ""
        ],
        "desc" : "Returns whether the specified accessibility object is still valid.",
        "name" : "isValid"
      },
      {
        "doc" : "Returns the process ID associated with the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * the process ID for the application to which the accessibility object ultimately belongs or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns the process ID associated with the specified accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:pid() -> integer | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:pid() -> integer | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the process ID for the application to which the accessibility object ultimately belongs or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns the process ID associated with the specified accessibility object.",
        "name" : "pid"
      },
      {
        "doc" : "Requests that the specified accessibility object perform the specified action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).\n\nReturns:\n * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false; otherwise returns nil and an error string if an accessibility error occurred\n\nNotes:\n * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil.",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).",
          ""
        ],
        "stripped_doc" : [
          "Requests that the specified accessibility object perform the specified action.",
          ""
        ],
        "def" : "hs.axuielement:performAction(action) -> axuielement | false | nil, errString",
        "notes" : [
          " * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil."
        ],
        "signature" : "hs.axuielement:performAction(action) -> axuielement | false | nil, errString",
        "type" : "Method",
        "returns" : [
          " * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false; otherwise returns nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Requests that the specified accessibility object perform the specified action.",
        "name" : "performAction"
      },
      {
        "doc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.\n\nParameters:\n * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.\n * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.\n * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil and an error string if no object could be identified or an accessibility error occurred\n\nNotes:\n * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs.axuielement.systemWideElement](#systemWideElement)).\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.\n * If this method is called on an axuielementObject representing an application, the search is restricted to the application.\n * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs.axuielement.systemElementAtPosition](#systemElementAtPosition).",
        "parameters" : [
          " * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.",
          " * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.",
          " * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.",
          ""
        ],
        "stripped_doc" : [
          "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
          ""
        ],
        "def" : "hs.axuielement:elementAtPosition(x, y | pointTable) -> axuielementObject | nil, errString",
        "notes" : [
          " * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs.axuielement.systemWideElement](#systemWideElement)).",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
          " * If this method is called on an axuielementObject representing an application, the search is restricted to the application.",
          " * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs.axuielement.systemElementAtPosition](#systemElementAtPosition)."
        ],
        "signature" : "hs.axuielement:elementAtPosition(x, y | pointTable) -> axuielementObject | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil and an error string if no object could be identified or an accessibility error occurred",
          ""
        ],
        "desc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
        "name" : "elementAtPosition"
      },
      {
        "doc" : "Returns the value of an accessibility object's parameterized attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).\n * `parameter` - the parameter required by the paramaterized attribute.\n\nReturns:\n * the current value of the parameterized attribute, nil if the parameterized attribute has no value, or nil and an error string if an accessibility error occurred\n\nNotes:\n * The specific parameter required for a each parameterized attribute is different and is often application specific thus requiring some experimentation. Notes regarding identified parameter types and thoughts on some still being investigated will be provided in the Hammerspoon Wiki, hopefully shortly after this module becomes part of a Hammerspoon release.",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).",
          " * `parameter` - the parameter required by the paramaterized attribute.",
          ""
        ],
        "stripped_doc" : [
          "Returns the value of an accessibility object's parameterized attribute.",
          ""
        ],
        "def" : "hs.axuielement:parameterizedAttributeValue(attribute, parameter) -> value | nil, errString",
        "notes" : [
          " * The specific parameter required for a each parameterized attribute is different and is often application specific thus requiring some experimentation. Notes regarding identified parameter types and thoughts on some still being investigated will be provided in the Hammerspoon Wiki, hopefully shortly after this module becomes part of a Hammerspoon release."
        ],
        "signature" : "hs.axuielement:parameterizedAttributeValue(attribute, parameter) -> value | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the current value of the parameterized attribute, nil if the parameterized attribute has no value, or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns the value of an accessibility object's parameterized attribute.",
        "name" : "parameterizedAttributeValue"
      },
      {
        "doc" : "Sets the accessibility object's attribute to the specified value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n * `value`     - the value to assign to the attribute\n\nReturns:\n * the axuielementObject on success; nil and an error string if the attribute could not be set or an accessibility error occurred.",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          " * `value`     - the value to assign to the attribute",
          ""
        ],
        "stripped_doc" : [
          "Sets the accessibility object's attribute to the specified value.",
          ""
        ],
        "def" : "hs.axuielement:setAttributeValue(attribute, value) -> axuielementObject  | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:setAttributeValue(attribute, value) -> axuielementObject  | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject on success; nil and an error string if the attribute could not be set or an accessibility error occurred."
        ],
        "desc" : "Sets the accessibility object's attribute to the specified value.",
        "name" : "setAttributeValue"
      },
      {
        "doc" : "If the element referes to an application, return an `hs.application` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid).",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "If the element referes to an application, return an `hs.application` object for the element.",
          ""
        ],
        "def" : "hs.axuielement:asHSApplication() -> hs.application object | nil",
        "notes" : [
          " * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid)."
        ],
        "signature" : "hs.axuielement:asHSApplication() -> hs.application object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil",
          ""
        ],
        "desc" : "If the element referes to an application, return an `hs.application` object for the element.",
        "name" : "asHSApplication"
      },
      {
        "doc" : "If the element referes to a window, return an `hs.window` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered a window by this method if it has an AXRole of AXWindow.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "If the element referes to a window, return an `hs.window` object for the element.",
          ""
        ],
        "def" : "hs.axuielement:asHSWindow() -> hs.window object | nil",
        "notes" : [
          " * An element is considered a window by this method if it has an AXRole of AXWindow."
        ],
        "signature" : "hs.axuielement:asHSWindow() -> hs.window object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil",
          ""
        ],
        "desc" : "If the element referes to a window, return an `hs.window` object for the element.",
        "name" : "asHSWindow"
      },
      {
        "doc" : "Sets the timeout value used accessibility queries performed from this element.\n\nParameters:\n * `value` - the number of seconds for the new timeout value. Must be 0 or positive.\n\nReturns:\n * the axuielementObject or nil and an error string if an accessibility error occurred\n\nNotes:\n * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs.axuielement.systemWideElement](#systemWideElement).\n * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refer to the identical accessibiity item are not affected.\n * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement.",
        "parameters" : [
          " * `value` - the number of seconds for the new timeout value. Must be 0 or positive.",
          ""
        ],
        "stripped_doc" : [
          "Sets the timeout value used accessibility queries performed from this element.",
          ""
        ],
        "def" : "hs.axuielement:setTimeout(value) -> axuielementObject | nil, errString",
        "notes" : [
          " * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs.axuielement.systemWideElement](#systemWideElement).",
          " * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refer to the identical accessibiity item are not affected.",
          " * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement."
        ],
        "signature" : "hs.axuielement:setTimeout(value) -> axuielementObject | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Sets the timeout value used accessibility queries performed from this element.",
        "name" : "setTimeout"
      },
      {
        "doc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.\n\nParameters:\n * None\n\nReturns:\n * a table containing this object and 0 or more parent objects representing the path from the root object to this element.\n\nNotes:\n * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most immediate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.\n * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.",
          ""
        ],
        "def" : "hs.axuielement:path() -> table",
        "notes" : [
          " * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most immediate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.",
          " * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)"
        ],
        "signature" : "hs.axuielement:path() -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing this object and 0 or more parent objects representing the path from the root object to this element.",
          ""
        ],
        "desc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.",
        "name" : "path"
      },
      {
        "doc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.\n\nParameters:\n * `criteria`  - the criteria to compare against the accessibility object\n\nReturns:\n * true if the axuielementObject matches the criteria, false if it does not.\n\nNotes:\n * the `criteria` argument must be one of the following:\n   * a single string, specifying the value the element's AXRole attribute must equal for a positive match\n   * an array table of strings specifying a list of possible values the element's AXRole attribute can equal for a positive match\n   * a table of key-value pairs specifying a more complex criteria. The table should be defined as follows:\n     * one or more of the following must be specified (though all specified must match):\n       * `attribute`              -- a string, or table of strings, specifying attributes that the element must support.\n       * `action`                 -- a string, or table of strings, specifying actions that the element must be able to perform.\n       * `parameterizedAttribute` -- a string, or table of strings, specifying parametrized attributes that the element must support.\n     * if the `attribute` key is specified, you can use one of the the following to specify a specific value the attribute must equal for a positive match. No more than one of these should be provided. If neither are present, then only the existence of the attributes specified by `attribute` are required.\n       * `value`                  -- a value, or table of values, that a specifeid attribute must equal. If it's a table, then only one of the values has to match the attribute value for a positive match. Note that if you specify more than one attribute with the `attribute` key, you must provide at least one value for each attribute in this table (order does not matter, but the match will fail if any atrribute does not match at least one value provided).\n         * when specifying a value which is itself a table with keys (e.g. frame, size, url, color, etc.) then you *must* provide the value or values as a table of tables, e.g. `{ { y = 22 } }`.\n           * only those keys which are specified within the value are checked for equality (or pattern matching). Values which are present in the attribute's value but are not specified in the comparioson value are ignored (i.e. the previous example of `y = 22` would only check the `y` component of an AXFrame attribute -- the `x`, `h`, and `w` values would be ignored).\n           * For value compoents which are numeric, e.g. `22` in the previous example, the default comparison is equality. You may change this with the `comparison` key described below in the optional keys.\n           * For possible keys when trying to match a color, see the documentation for `hs.drawing.color`.\n           * For possible keys when trying to match a URL, use `url = <string>` and\/or `filePath = <string>`. The string for the specified table key will be compared in accordance with the `pattern` optional key described below.\n         * when specifying a value which is itself a table of values (e.g. a list of axuielementObjects) you *must* provide the value or values as a table of tables, e.g. `{ { obj1, obj2 } }`.\n           * Order of the elements provided in the comparison value does not matter -- this only tests for existence within the attributes value.\n           * The test is for inclusion only -- the attribute's value may contain other elements as well, but must contain those specified within the comparison value.\n       * `nilValue`               -- a boolean, specifying that the attributes must not have an assigned value (true) or may be assigned any value except nil (false). If the `value` key is specified, this key is ignored. Note that this applies to *all* of the attributes specified with the `attribute` key.\n     * the following are optional keys and are not required:\n       * `pattern`                -- a boolean, default false, specifying whether string matches for attribute values should be evaluated with `string.match` (true) or as exact matches (false). See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console). If the `value` key is not set, than this key is ignored.\n       * `invert`                 -- a boolean, default false, specifying inverted logic for the criteria result --- if this is true and the criteria matches, evaluate criteria as false; otherwise evaluate as true.\n       * `comparison`             -- a string, default \"==\", specifying the comparison to be used when comparing numeric values. Possible comparison strings are: \"==\" for equality, \"<\" for less than, \"<=\" for less than or equal to, \">\" for greater than, \">=\" for greater than or equal to, or \"~=\" for not equal to.\n\n   * an array table of one or more key-value tables as described immediately above; the element must be a positive match for all of the individual criteria tables specified (logical AND).\n * This method is used by [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create criteria functions compatible with [hs.axuielement:elementSearch](#elementSearch).",
        "parameters" : [
          " * `criteria`  - the criteria to compare against the accessibility object",
          ""
        ],
        "stripped_doc" : [
          "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
          ""
        ],
        "def" : "hs.axuielement:matchesCriteria(criteria) -> boolean",
        "notes" : [
          " * the `criteria` argument must be one of the following:",
          "   * a single string, specifying the value the element's AXRole attribute must equal for a positive match",
          "   * an array table of strings specifying a list of possible values the element's AXRole attribute can equal for a positive match",
          "   * a table of key-value pairs specifying a more complex criteria. The table should be defined as follows:",
          "     * one or more of the following must be specified (though all specified must match):",
          "       * `attribute`              -- a string, or table of strings, specifying attributes that the element must support.",
          "       * `action`                 -- a string, or table of strings, specifying actions that the element must be able to perform.",
          "       * `parameterizedAttribute` -- a string, or table of strings, specifying parametrized attributes that the element must support.",
          "     * if the `attribute` key is specified, you can use one of the the following to specify a specific value the attribute must equal for a positive match. No more than one of these should be provided. If neither are present, then only the existence of the attributes specified by `attribute` are required.",
          "       * `value`                  -- a value, or table of values, that a specifeid attribute must equal. If it's a table, then only one of the values has to match the attribute value for a positive match. Note that if you specify more than one attribute with the `attribute` key, you must provide at least one value for each attribute in this table (order does not matter, but the match will fail if any atrribute does not match at least one value provided).",
          "         * when specifying a value which is itself a table with keys (e.g. frame, size, url, color, etc.) then you *must* provide the value or values as a table of tables, e.g. `{ { y = 22 } }`.",
          "           * only those keys which are specified within the value are checked for equality (or pattern matching). Values which are present in the attribute's value but are not specified in the comparioson value are ignored (i.e. the previous example of `y = 22` would only check the `y` component of an AXFrame attribute -- the `x`, `h`, and `w` values would be ignored).",
          "           * For value compoents which are numeric, e.g. `22` in the previous example, the default comparison is equality. You may change this with the `comparison` key described below in the optional keys.",
          "           * For possible keys when trying to match a color, see the documentation for `hs.drawing.color`.",
          "           * For possible keys when trying to match a URL, use `url = <string>` and\/or `filePath = <string>`. The string for the specified table key will be compared in accordance with the `pattern` optional key described below.",
          "         * when specifying a value which is itself a table of values (e.g. a list of axuielementObjects) you *must* provide the value or values as a table of tables, e.g. `{ { obj1, obj2 } }`.",
          "           * Order of the elements provided in the comparison value does not matter -- this only tests for existence within the attributes value.",
          "           * The test is for inclusion only -- the attribute's value may contain other elements as well, but must contain those specified within the comparison value.",
          "       * `nilValue`               -- a boolean, specifying that the attributes must not have an assigned value (true) or may be assigned any value except nil (false). If the `value` key is specified, this key is ignored. Note that this applies to *all* of the attributes specified with the `attribute` key.",
          "     * the following are optional keys and are not required:",
          "       * `pattern`                -- a boolean, default false, specifying whether string matches for attribute values should be evaluated with `string.match` (true) or as exact matches (false). See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console). If the `value` key is not set, than this key is ignored.",
          "       * `invert`                 -- a boolean, default false, specifying inverted logic for the criteria result --- if this is true and the criteria matches, evaluate criteria as false; otherwise evaluate as true.",
          "       * `comparison`             -- a string, default \"==\", specifying the comparison to be used when comparing numeric values. Possible comparison strings are: \"==\" for equality, \"<\" for less than, \"<=\" for less than or equal to, \">\" for greater than, \">=\" for greater than or equal to, or \"~=\" for not equal to.",
          "",
          "   * an array table of one or more key-value tables as described immediately above; the element must be a positive match for all of the individual criteria tables specified (logical AND).",
          " * This method is used by [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create criteria functions compatible with [hs.axuielement:elementSearch](#elementSearch)."
        ],
        "signature" : "hs.axuielement:matchesCriteria(criteria) -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the axuielementObject matches the criteria, false if it does not.",
          ""
        ],
        "desc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
        "name" : "matchesCriteria"
      },
      {
        "doc" : "Captures all of the available information for the accessibility object and its descendants and returns it in a table for inspection.\n\nParameters:\n * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)\n * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the initial accessibility object that should be visited to identify descendant elements and their attributes.\n * `withParents` - an optional boolean, default false, specifying whether or not an element's (or descendant's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.\n\nReturns:\n * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)\n\nNotes:\n* The format of the `results` table passed to the callback for this method is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.\n * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments.",
        "parameters" : [
          " * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)",
          " * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the initial accessibility object that should be visited to identify descendant elements and their attributes.",
          " * `withParents` - an optional boolean, default false, specifying whether or not an element's (or descendant's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.",
          ""
        ],
        "stripped_doc" : [
          "Captures all of the available information for the accessibility object and its descendants and returns it in a table for inspection.",
          ""
        ],
        "def" : "hs.axuielement:buildTree(callback, [depth], [withParents]) -> elementSearchObject",
        "notes" : [
          "* The format of the `results` table passed to the callback for this method is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.",
          " * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments."
        ],
        "signature" : "hs.axuielement:buildTree(callback, [depth], [withParents]) -> elementSearchObject",
        "type" : "Method",
        "returns" : [
          " * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)",
          ""
        ],
        "desc" : "Captures all of the available information for the accessibility object and its descendants and returns it in a table for inspection.",
        "name" : "buildTree"
      },
      {
        "doc" : "Query the accessibility object for all child accessibility objects and their descendants\n\nParameters:\n * `callback`    - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the discovered descendant elements. `msg` will be \"completed\" when the traversal has completed normally and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)\n * `withParents` - an optional boolean, default false, indicating that the parent of objects (and their descendants) should be collected as well.\n\nReturns:\n * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)\n\nNotes:\n * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments.",
        "parameters" : [
          " * `callback`    - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the discovered descendant elements. `msg` will be \"completed\" when the traversal has completed normally and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)",
          " * `withParents` - an optional boolean, default false, indicating that the parent of objects (and their descendants) should be collected as well.",
          ""
        ],
        "stripped_doc" : [
          "Query the accessibility object for all child accessibility objects and their descendants",
          ""
        ],
        "def" : "hs.axuielement:allDescendantElements(callback, [withParents]) -> elementSearchObject",
        "notes" : [
          " * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments."
        ],
        "signature" : "hs.axuielement:allDescendantElements(callback, [withParents]) -> elementSearchObject",
        "type" : "Method",
        "returns" : [
          " * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)",
          ""
        ],
        "desc" : "Query the accessibility object for all child accessibility objects and their descendants",
        "name" : "allDescendantElements"
      },
      {
        "doc" : "Search for and generate a table of the accessibility elements for the attributes and descendants of this object based on the specified criteria.\n\nParameters:\n * `callback`       - a (usually) required function which will receive the results of this search. The callback should expect three arguments and return none. The arguments to the callback function will be `msg`, a string specifying how the search ended and `results`, the elementSearchObject containing the requested results, and the number of items added to the results (see `count` in `namedModifiers`). `msg` will be \"completed\" if the search completes normally, or a string starting with \"**\" if it is terminated early (see Returns: and Notes: for more details).\n * `criteria`       - an optional function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.\n * `namedModifiers` - an optional table specifying key-value pairs that further modify or control the search. This table may contain 0 or more of the following keys:\n   * `count`          - an optional integer, default `math.huge`, specifying the maximum number of matches to collect before ending the search and invoking the callback. You can continue the search to find additional elements by invoking `elementSearchObject:next()` (described below in the `Returns` section) on the return value of this method, or on the results argument passed to the callback.\n   * `depth`          - an optional integer, default `math.huge`, specifying the maximum number of steps (descendants) from the initial accessibility element the search should visit. If you know that your desired element(s) are relatively close to your starting element, setting this to a lower value can significantly speed up the search.\n   * The following are also recognized, but may impact the speed of the search, the responsiveness of Hammerspoon, or the format of the results in ways that limit further filtering and are not recommended except when you know that you require them:\n     * `asTree`         - an optional boolean, default false, and ignored if `criteria` is specified and non-empty, `objectOnly` is true, or `count` is specified. This modifier specifies whether the search results should return as an array table of tables containing each element's details (false) or as a tree where in which the root node details are the key-value pairs of the returned table and descendant elements are likewise described in subtables attached to the attribute name they belong to (true). This format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.\n     * `includeParents` - a boolean, default false, specifying whether or not parent attributes (`AXParent` and `AXTopLevelUIElement`) should be examined during the search. Note that in most cases, setting this value to true will end up traversing the entire Accessibility structure for the target application and may significantly slow down the search.\n     * `noCallback`     - an optional boolean, default false, and ignored if `callback` is not also nil, allowing you to specify nil as the callback when set to true. This feature requires setting this named argumennt to true *and* specifying the callback field as nil because starting a query from an element with a lot of descendants **WILL** block Hammerspoon and slow down the responsiveness of your computer (I've seen blocking for over 5 minutes in extreme cases) and should be used *only* when you know you are starting from close to the end of the element heirarchy.\n     * `objectOnly`     - an optional boolean, default true, specifying whether each result in the final table will be the accessibility element discovered (true) or a table containing details about the element include the attribute names, actions, etc. for the element (false). This latter format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.\n\nReturns:\n * an elementSearchObject which contains metamethods allowing you to check to see if the process has completed and cancel it early if desired. The methods include:\n   * `elementSearchObject:cancel([reason])` - cancels the current search and invokes the callback with the partial results already collected. If you specify `reason`, the `msg` argument for the callback will be `** <reason>`; otherwise it will be \"** cancelled\".\n   * `elementSearchObject:isRunning()`      - returns true if the search is currently ongoing or false if it has completed or been cancelled.\n   * `elementSearchObject:matched()`        - returns an integer specifying the number of elements which have already been found that meet the specified criteria function.\n   * `elementSearchObject:runTime()`        - returns an integer specifying the number of seconds spent performing this search. Note that this is *not* an accurate measure of how much time a given search will always take because the time will be greatly affected by how much other activity is occurring within Hammerspoon and on the users computer. Resuming a cancelled search or a search which invoked the callback because it reached `count` items with the `next` method (descibed below) will cause this number to begin increasing again to provide a cumulative total of time spent performing the search; time between when the callback is invoked and the `next` method is invoked is not included.\n   * `elementSearchObject:visited()`        - returns an integer specifying the number of elements which have been examined during the search so far.\n   * If `asTree` is false or not specified, the following additional methods will be available:\n     * `elementSearchObject:filter(criteria, [callback]) -> filterObject`\n       * returns a new table containing elements in the search results that match the specified criteria.\n         * `criteria`  - a required function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.\n         * `callback`  - an optional callback which should expect two arguments and return none. If a callback is specified, the callback will receive two arguments, a msg indicating how the callback ended (the message format matches the style defined for this method) and the filterObject which contains the matching elements.\n       * The filterObject returned by this method and passed to the callback, if defined, will support the following methods as defined here: `cancel`, `filter`, `isRunning`, `matched`, `runTime`, and `visited`.\n     * `elementSearchObject:next()` - if the search was cancelled or reached the count of matches specified, this method will continue the search where it left off. The elementSearchObject returned when the callback is next invoked will have up to `count` items added to the existing results (calls to `next` are cummulative for the total results captured in the elementSearchObject). The third ardument to the callback will be the number of items *added* to the search results, not the number of items *in* the search results.\n\nNotes:\n * This method utilizes coroutines to keep Hammerspoon responsive, but may be slow to complete if `includeParents` is true, if you do not specify `depth`, or if you start from an element that has a lot of descendants (e.g. the application element for a web browser). This is dependent entirely upon how many active accessibility elements the target application defines and where you begin your search and cannot reliably be determined up front, so you may need to experiment to find the best balance for your specific requirements.\n * The search performed is a breadth-first search, so in general earlier elements in the results table will be \"closer\" in the Accessibility hierarchy to the starting point than later elements.\n * The `elementSearchObject` returned by this method and the results passed in as the second argument to the callback function are the same object -- you can use either one in your code depending upon which makes the most sense. Results that match the criteria function are added to the `elementSearchObject` as they are found, so if you examine the object\/table returned by this method and determine that you have located the element or elements you require before the callback has been invoked, you can safely invoke the cancel method to end the search early.\n   * The exception to this is when `asTree` is true and `objectsOnly` is false and the search criteria is nil -- see [hs.axuielement:buildTree](#buildTree). In this case, the results passed to the callback will be equal to `elementSearchObject[1]`.\n * If `objectsOnly` is specified as false, it may take some time after `cancel` is invoked for the mapping of element attribute tables to the descendant elements in the results set -- this is a by product of the need to iterate through the results to match up all of the instances of each element to it's attribute table.\n * [hs.axuielement:allDescendantElements](#allDescendantElements) is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`\n * [hs.axuielement:buildTree](#buildTree) is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`",
        "parameters" : [
          " * `callback`       - a (usually) required function which will receive the results of this search. The callback should expect three arguments and return none. The arguments to the callback function will be `msg`, a string specifying how the search ended and `results`, the elementSearchObject containing the requested results, and the number of items added to the results (see `count` in `namedModifiers`). `msg` will be \"completed\" if the search completes normally, or a string starting with \"**\" if it is terminated early (see Returns: and Notes: for more details).",
          " * `criteria`       - an optional function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.",
          " * `namedModifiers` - an optional table specifying key-value pairs that further modify or control the search. This table may contain 0 or more of the following keys:",
          "   * `count`          - an optional integer, default `math.huge`, specifying the maximum number of matches to collect before ending the search and invoking the callback. You can continue the search to find additional elements by invoking `elementSearchObject:next()` (described below in the `Returns` section) on the return value of this method, or on the results argument passed to the callback.",
          "   * `depth`          - an optional integer, default `math.huge`, specifying the maximum number of steps (descendants) from the initial accessibility element the search should visit. If you know that your desired element(s) are relatively close to your starting element, setting this to a lower value can significantly speed up the search.",
          "   * The following are also recognized, but may impact the speed of the search, the responsiveness of Hammerspoon, or the format of the results in ways that limit further filtering and are not recommended except when you know that you require them:",
          "     * `asTree`         - an optional boolean, default false, and ignored if `criteria` is specified and non-empty, `objectOnly` is true, or `count` is specified. This modifier specifies whether the search results should return as an array table of tables containing each element's details (false) or as a tree where in which the root node details are the key-value pairs of the returned table and descendant elements are likewise described in subtables attached to the attribute name they belong to (true). This format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.",
          "     * `includeParents` - a boolean, default false, specifying whether or not parent attributes (`AXParent` and `AXTopLevelUIElement`) should be examined during the search. Note that in most cases, setting this value to true will end up traversing the entire Accessibility structure for the target application and may significantly slow down the search.",
          "     * `noCallback`     - an optional boolean, default false, and ignored if `callback` is not also nil, allowing you to specify nil as the callback when set to true. This feature requires setting this named argumennt to true *and* specifying the callback field as nil because starting a query from an element with a lot of descendants **WILL** block Hammerspoon and slow down the responsiveness of your computer (I've seen blocking for over 5 minutes in extreme cases) and should be used *only* when you know you are starting from close to the end of the element heirarchy.",
          "     * `objectOnly`     - an optional boolean, default true, specifying whether each result in the final table will be the accessibility element discovered (true) or a table containing details about the element include the attribute names, actions, etc. for the element (false). This latter format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.",
          ""
        ],
        "stripped_doc" : [
          "Search for and generate a table of the accessibility elements for the attributes and descendants of this object based on the specified criteria.",
          ""
        ],
        "def" : "hs.axuielement:elementSearch(callback, [criteria], [namedModifiers]) -> elementSearchObject",
        "notes" : [
          " * This method utilizes coroutines to keep Hammerspoon responsive, but may be slow to complete if `includeParents` is true, if you do not specify `depth`, or if you start from an element that has a lot of descendants (e.g. the application element for a web browser). This is dependent entirely upon how many active accessibility elements the target application defines and where you begin your search and cannot reliably be determined up front, so you may need to experiment to find the best balance for your specific requirements.",
          " * The search performed is a breadth-first search, so in general earlier elements in the results table will be \"closer\" in the Accessibility hierarchy to the starting point than later elements.",
          " * The `elementSearchObject` returned by this method and the results passed in as the second argument to the callback function are the same object -- you can use either one in your code depending upon which makes the most sense. Results that match the criteria function are added to the `elementSearchObject` as they are found, so if you examine the object\/table returned by this method and determine that you have located the element or elements you require before the callback has been invoked, you can safely invoke the cancel method to end the search early.",
          "   * The exception to this is when `asTree` is true and `objectsOnly` is false and the search criteria is nil -- see [hs.axuielement:buildTree](#buildTree). In this case, the results passed to the callback will be equal to `elementSearchObject[1]`.",
          " * If `objectsOnly` is specified as false, it may take some time after `cancel` is invoked for the mapping of element attribute tables to the descendant elements in the results set -- this is a by product of the need to iterate through the results to match up all of the instances of each element to it's attribute table.",
          " * [hs.axuielement:allDescendantElements](#allDescendantElements) is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`",
          " * [hs.axuielement:buildTree](#buildTree) is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`"
        ],
        "signature" : "hs.axuielement:elementSearch(callback, [criteria], [namedModifiers]) -> elementSearchObject",
        "type" : "Method",
        "returns" : [
          " * an elementSearchObject which contains metamethods allowing you to check to see if the process has completed and cancel it early if desired. The methods include:",
          "   * `elementSearchObject:cancel([reason])` - cancels the current search and invokes the callback with the partial results already collected. If you specify `reason`, the `msg` argument for the callback will be `** <reason>`; otherwise it will be \"** cancelled\".",
          "   * `elementSearchObject:isRunning()`      - returns true if the search is currently ongoing or false if it has completed or been cancelled.",
          "   * `elementSearchObject:matched()`        - returns an integer specifying the number of elements which have already been found that meet the specified criteria function.",
          "   * `elementSearchObject:runTime()`        - returns an integer specifying the number of seconds spent performing this search. Note that this is *not* an accurate measure of how much time a given search will always take because the time will be greatly affected by how much other activity is occurring within Hammerspoon and on the users computer. Resuming a cancelled search or a search which invoked the callback because it reached `count` items with the `next` method (descibed below) will cause this number to begin increasing again to provide a cumulative total of time spent performing the search; time between when the callback is invoked and the `next` method is invoked is not included.",
          "   * `elementSearchObject:visited()`        - returns an integer specifying the number of elements which have been examined during the search so far.",
          "   * If `asTree` is false or not specified, the following additional methods will be available:",
          "     * `elementSearchObject:filter(criteria, [callback]) -> filterObject`",
          "       * returns a new table containing elements in the search results that match the specified criteria.",
          "         * `criteria`  - a required function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.",
          "         * `callback`  - an optional callback which should expect two arguments and return none. If a callback is specified, the callback will receive two arguments, a msg indicating how the callback ended (the message format matches the style defined for this method) and the filterObject which contains the matching elements.",
          "       * The filterObject returned by this method and passed to the callback, if defined, will support the following methods as defined here: `cancel`, `filter`, `isRunning`, `matched`, `runTime`, and `visited`.",
          "     * `elementSearchObject:next()` - if the search was cancelled or reached the count of matches specified, this method will continue the search where it left off. The elementSearchObject returned when the callback is next invoked will have up to `count` items added to the existing results (calls to `next` are cummulative for the total results captured in the elementSearchObject). The third ardument to the callback will be the number of items *added* to the search results, not the number of items *in* the search results.",
          ""
        ],
        "desc" : "Search for and generate a table of the accessibility elements for the attributes and descendants of this object based on the specified criteria.",
        "name" : "elementSearch"
      },
      {
        "doc" : "Returns a table containing only those immediate children of the element that perform the specified role.\n\nParameters:\n * `role` - a string specifying the role that the returned children must perform. Example values can be found in [hs.axuielement.roles](#roles).\n\nReturns:\n * a table containing zero or more axuielementObjects.\n\nNotes:\n * only the immediate children of the object are searched.",
        "parameters" : [
          " * `role` - a string specifying the role that the returned children must perform. Example values can be found in [hs.axuielement.roles](#roles).",
          ""
        ],
        "stripped_doc" : [
          "Returns a table containing only those immediate children of the element that perform the specified role.",
          ""
        ],
        "def" : "hs.axuielement:childrenWithRole(role) -> table",
        "notes" : [
          " * only the immediate children of the object are searched."
        ],
        "signature" : "hs.axuielement:childrenWithRole(role) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing zero or more axuielementObjects.",
          ""
        ],
        "desc" : "Returns a table containing only those immediate children of the element that perform the specified role.",
        "name" : "childrenWithRole"
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "A table of common accessibility object action names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.actions`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object action names, provided for reference.",
          ""
        ],
        "def" : "hs.axuielement.actions[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.actions`"
        ],
        "signature" : "hs.axuielement.actions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object action names, provided for reference.",
        "name" : "actions"
      },
      {
        "doc" : "A table of common accessibility object attribute names which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as keys in the match criteria argument.\n\nNotes:\n * This table is provided for reference only and is not intended to be comprehensive.\n * You can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.attributes`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object attribute names which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as keys in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.attributes[]",
        "notes" : [
          " * This table is provided for reference only and is not intended to be comprehensive.",
          " * You can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.attributes`"
        ],
        "signature" : "hs.axuielement.attributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object attribute names which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as keys in the match criteria argument.",
        "name" : "attributes"
      },
      {
        "doc" : "A table of orientation types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXOrientation\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.orientations`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of orientation types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXOrientation\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.orientations[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.orientations`"
        ],
        "signature" : "hs.axuielement.orientations[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of orientation types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXOrientation\" in the match criteria argument.",
        "name" : "orientations"
      },
      {
        "doc" : "A table of common accessibility object parameterized attribute names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.parameterizedAttributes`\n * Parameterized attributes are attributes that take an argument when querying the element. There is very little documentation available for most of these and application developers can implement their own for which we may never be able to get any documentation. This table contains parameterized attribute names that are defined within the Apple documentation and a few others that have been discovered.\n * Documentation covering what has been discovered through experimentation about paramterized attributes is planned and should be added to the Hammerspoon wiki shortly after this module becomes part of a formal release.",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object parameterized attribute names, provided for reference.",
          ""
        ],
        "def" : "hs.axuielement.parameterizedAttributes[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.parameterizedAttributes`",
          " * Parameterized attributes are attributes that take an argument when querying the element. There is very little documentation available for most of these and application developers can implement their own for which we may never be able to get any documentation. This table contains parameterized attribute names that are defined within the Apple documentation and a few others that have been discovered.",
          " * Documentation covering what has been discovered through experimentation about paramterized attributes is planned and should be added to the Hammerspoon wiki shortly after this module becomes part of a formal release."
        ],
        "signature" : "hs.axuielement.parameterizedAttributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object parameterized attribute names, provided for reference.",
        "name" : "parameterizedAttributes"
      },
      {
        "doc" : "A table of common accessibility object roles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXRole\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.roles`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object roles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXRole\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.roles[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.roles`"
        ],
        "signature" : "hs.axuielement.roles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object roles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXRole\" in the match criteria argument.",
        "name" : "roles"
      },
      {
        "doc" : "A table of ruler marker types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXMarkerType\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.rulerMarkers`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of ruler marker types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXMarkerType\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.rulerMarkers[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.rulerMarkers`"
        ],
        "signature" : "hs.axuielement.rulerMarkers[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of ruler marker types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXMarkerType\" in the match criteria argument.",
        "name" : "rulerMarkers"
      },
      {
        "doc" : "A table of sort direction types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSortDirection\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.sortDirections`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of sort direction types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSortDirection\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.sortDirections[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.sortDirections`"
        ],
        "signature" : "hs.axuielement.sortDirections[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of sort direction types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSortDirection\" in the match criteria argument.",
        "name" : "sortDirections"
      },
      {
        "doc" : "A table of common accessibility object subroles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSubrole\" in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.subroles`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object subroles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSubrole\" in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.subroles[]",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.subroles`"
        ],
        "signature" : "hs.axuielement.subroles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object subroles which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for \"AXSubrole\" in the match criteria argument.",
        "name" : "subroles"
      },
      {
        "doc" : "A table of measurement unit types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for attributes which specify measurement unit types (e.g. \"AXUnits\", \"AXHorizontalUnits\", and \"AXVerticalUnits\") in the match criteria argument.\n\nNotes:\n * this table is provided for reference only and may not be comprehensive.\n * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.units`",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of measurement unit types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for attributes which specify measurement unit types (e.g. \"AXUnits\", \"AXHorizontalUnits\", and \"AXVerticalUnits\") in the match criteria argument.",
          ""
        ],
        "def" : "hs.axuielement.units[]",
        "notes" : [
          " * this table is provided for reference only and may not be comprehensive.",
          " * you can view the contents of this table from the Hammerspoon console by typing in `hs.axuielement.units`"
        ],
        "signature" : "hs.axuielement.units[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of measurement unit types which may be used with [hs.axuielement:elementSearch](#elementSearch) or [hs.axuielement:matchesCriteria](#matchesCriteria) as attribute values for attributes which specify measurement unit types (e.g. \"AXUnits\", \"AXHorizontalUnits\", and \"AXVerticalUnits\") in the match criteria argument.",
        "name" : "units"
      },
      {
        "doc" : "Returns a function for use with [hs.axuielement:elementSearch](#elementSearch) that uses [hs.axuielement:matchesCriteria](#matchesCriteria) with the specified criteria.\n\nParameters:\n * `criteria` - a criteria definition as defined for the [hs.axuielement:matchesCriteria](#matchesCriteria) method.\n\nReturns:\n * a function which can be used as the `criteriaFunction` for [hs.axuielement:elementSearch](#elementSearch).",
        "parameters" : [
          " * `criteria` - a criteria definition as defined for the [hs.axuielement:matchesCriteria](#matchesCriteria) method.",
          ""
        ],
        "stripped_doc" : [
          "Returns a function for use with [hs.axuielement:elementSearch](#elementSearch) that uses [hs.axuielement:matchesCriteria](#matchesCriteria) with the specified criteria.",
          ""
        ],
        "def" : "hs.axuielement.searchCriteriaFunction(criteria) -> function",
        "notes" : [

        ],
        "signature" : "hs.axuielement.searchCriteriaFunction(criteria) -> function",
        "type" : "Function",
        "returns" : [
          " * a function which can be used as the `criteriaFunction` for [hs.axuielement:elementSearch](#elementSearch)."
        ],
        "desc" : "Returns a function for use with [hs.axuielement:elementSearch](#elementSearch) that uses [hs.axuielement:matchesCriteria](#matchesCriteria) with the specified criteria.",
        "name" : "searchCriteriaFunction"
      },
      {
        "doc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.\n\nParameters:\n * `applicationObject` - the `hs.application` object for the Application or a string or number which will be passed to `hs.application.find` to get an `hs.application` object.\n\nReturns:\n * an axuielementObject for the application specified\n\nNotes:\n * if `applicationObject` is a string or number, only the first item found with `hs.application.find` will be used by this function to create an axuielementObject.",
        "parameters" : [
          " * `applicationObject` - the `hs.application` object for the Application or a string or number which will be passed to `hs.application.find` to get an `hs.application` object.",
          ""
        ],
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
          ""
        ],
        "def" : "hs.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "notes" : [
          " * if `applicationObject` is a string or number, only the first item found with `hs.application.find` will be used by this function to create an axuielementObject."
        ],
        "signature" : "hs.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified",
          ""
        ],
        "desc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
        "name" : "applicationElement"
      },
      {
        "doc" : "Returns the top-level accessibility object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * an axuielementObject for the application specified, or nil if it cannot be determined",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "notes" : [

        ],
        "signature" : "hs.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified, or nil if it cannot be determined"
        ],
        "desc" : "Returns the top-level accessibility object for the application with the specified process ID.",
        "name" : "applicationElementForPID"
      },
      {
        "doc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.\n\nParameters:\n * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.\n * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.\n * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * See also [hs.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs.axuielement.systemWideElement():elementAtPosition(...)`.\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
        "parameters" : [
          " * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.",
          " * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.",
          " * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.",
          ""
        ],
        "stripped_doc" : [
          "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
          ""
        ],
        "def" : "hs.axuielement.systemElementAtPosition(x, y | pointTable) -> axuielementObject",
        "notes" : [
          " * See also [hs.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs.axuielement.systemWideElement():elementAtPosition(...)`.",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location."
        ],
        "signature" : "hs.axuielement.systemElementAtPosition(x, y | pointTable) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "desc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
        "name" : "systemElementAtPosition"
      },
      {
        "doc" : "Returns an accessibility object that provides access to system attributes.\n\nParameters:\n * None\n\nReturns:\n * the axuielementObject for the system attributes",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns an accessibility object that provides access to system attributes.",
          ""
        ],
        "def" : "hs.axuielement.systemWideElement() -> axuielementObject",
        "notes" : [

        ],
        "signature" : "hs.axuielement.systemWideElement() -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * the axuielementObject for the system attributes"
        ],
        "desc" : "Returns an accessibility object that provides access to system attributes.",
        "name" : "systemWideElement"
      },
      {
        "doc" : "Returns the accessibility object for the window specified by the `hs.window` object.\n\nParameters:\n * `windowObject` - the `hs.window` object for the window or a string or number which will be passed to `hs.window.find` to get an `hs.window` object.\n\nReturns:\n * an axuielementObject for the window specified\n\nNotes:\n * if `windowObject` is a string or number, only the first item found with `hs.window.find` will be used by this function to create an axuielementObject.",
        "parameters" : [
          " * `windowObject` - the `hs.window` object for the window or a string or number which will be passed to `hs.window.find` to get an `hs.window` object.",
          ""
        ],
        "stripped_doc" : [
          "Returns the accessibility object for the window specified by the `hs.window` object.",
          ""
        ],
        "def" : "hs.axuielement.windowElement(windowObject) -> axuielementObject",
        "notes" : [
          " * if `windowObject` is a string or number, only the first item found with `hs.window.find` will be used by this function to create an axuielementObject."
        ],
        "signature" : "hs.axuielement.windowElement(windowObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the window specified",
          ""
        ],
        "desc" : "Returns the accessibility object for the window specified by the `hs.window` object.",
        "name" : "windowElement"
      },
      {
        "doc" : "Returns a localized description of the specified accessibility object's action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).\n\nReturns:\n * a string containing a description of the object's action, nil if no description is available, or nil and an error string if an accessibility error occurred\n\nNotes:\n * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers.",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns a localized description of the specified accessibility object's action.",
          ""
        ],
        "def" : "hs.axuielement:actionDescription(action) -> string | nil, errString",
        "notes" : [
          " * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers."
        ],
        "signature" : "hs.axuielement:actionDescription(action) -> string | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a string containing a description of the object's action, nil if no description is available, or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a localized description of the specified accessibility object's action.",
        "name" : "actionDescription"
      },
      {
        "doc" : "Returns a list of all the actions the specified accessibility object can perform.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all actions supported by the axuielementObject or nil and an error string if an accessibility error occurred\n\nNotes:\n * Common action names can be found in the [hs.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a list of all the actions the specified accessibility object can perform.",
          ""
        ],
        "def" : "hs.axuielement:actionNames() -> table | nil, errString",
        "notes" : [
          " * Common action names can be found in the [hs.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs.axuielement:actionNames() -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all actions supported by the axuielementObject or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a list of all the actions the specified accessibility object can perform.",
        "name" : "actionNames"
      },
      {
        "doc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.\n\nParameters:\n * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.\n\nReturns:\n * a table with key-value pairs corresponding to the attributes of the accessibility object or nil and an error string if an accessibility error occurred\n\nNotes:\n * if `includeErrors` is not specified or is false, then attributes which exist for the element, but currently have no value assigned, will not appear in the table. This is because Lua treats a nil value for a table's key-value pair as an instruction to remove the key from the table, if it currently exists.\n * To include attributes which exist but are currently unset, you need to specify `includeErrors` as true.\n   * attributes for which no value is currently assigned will be given a table value with the following key-value pairs:\n     * `_code` = -25212\n     * `error` = \"Requested value does not exist\"",
        "parameters" : [
          " * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.",
          ""
        ],
        "stripped_doc" : [
          "Returns a table containing key-value pairs for all attributes of the accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:allAttributeValues([includeErrors]) -> table | nil, errString",
        "notes" : [
          " * if `includeErrors` is not specified or is false, then attributes which exist for the element, but currently have no value assigned, will not appear in the table. This is because Lua treats a nil value for a table's key-value pair as an instruction to remove the key from the table, if it currently exists.",
          " * To include attributes which exist but are currently unset, you need to specify `includeErrors` as true.",
          "   * attributes for which no value is currently assigned will be given a table value with the following key-value pairs:",
          "     * `_code` = -25212",
          "     * `error` = \"Requested value does not exist\""
        ],
        "signature" : "hs.axuielement:allAttributeValues([includeErrors]) -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a table with key-value pairs corresponding to the attributes of the accessibility object or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.",
        "name" : "allAttributeValues"
      },
      {
        "doc" : "Query the accessibility object for all child accessibility objects and their descendants\n\nParameters:\n * `callback`    - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the discovered descendant elements. `msg` will be \"completed\" when the traversal has completed normally and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)\n * `withParents` - an optional boolean, default false, indicating that the parent of objects (and their descendants) should be collected as well.\n\nReturns:\n * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)\n\nNotes:\n * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments.",
        "parameters" : [
          " * `callback`    - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the discovered descendant elements. `msg` will be \"completed\" when the traversal has completed normally and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)",
          " * `withParents` - an optional boolean, default false, indicating that the parent of objects (and their descendants) should be collected as well.",
          ""
        ],
        "stripped_doc" : [
          "Query the accessibility object for all child accessibility objects and their descendants",
          ""
        ],
        "def" : "hs.axuielement:allDescendantElements(callback, [withParents]) -> elementSearchObject",
        "notes" : [
          " * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments."
        ],
        "signature" : "hs.axuielement:allDescendantElements(callback, [withParents]) -> elementSearchObject",
        "type" : "Method",
        "returns" : [
          " * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)",
          ""
        ],
        "desc" : "Query the accessibility object for all child accessibility objects and their descendants",
        "name" : "allDescendantElements"
      },
      {
        "doc" : "If the element referes to an application, return an `hs.application` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid).",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "If the element referes to an application, return an `hs.application` object for the element.",
          ""
        ],
        "def" : "hs.axuielement:asHSApplication() -> hs.application object | nil",
        "notes" : [
          " * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid)."
        ],
        "signature" : "hs.axuielement:asHSApplication() -> hs.application object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil",
          ""
        ],
        "desc" : "If the element referes to an application, return an `hs.application` object for the element.",
        "name" : "asHSApplication"
      },
      {
        "doc" : "If the element referes to a window, return an `hs.window` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered a window by this method if it has an AXRole of AXWindow.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "If the element referes to a window, return an `hs.window` object for the element.",
          ""
        ],
        "def" : "hs.axuielement:asHSWindow() -> hs.window object | nil",
        "notes" : [
          " * An element is considered a window by this method if it has an AXRole of AXWindow."
        ],
        "signature" : "hs.axuielement:asHSWindow() -> hs.window object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil",
          ""
        ],
        "desc" : "If the element referes to a window, return an `hs.window` object for the element.",
        "name" : "asHSWindow"
      },
      {
        "doc" : "Returns a list of all the attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred\n\nNotes:\n * Common attribute names can be found in the [hs.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a list of all the attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:attributeNames() -> table | nil, errString",
        "notes" : [
          " * Common attribute names can be found in the [hs.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs.axuielement:attributeNames() -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns a list of all the attributes supported by the specified accessibility object.",
        "name" : "attributeNames"
      },
      {
        "doc" : "Returns the value of an accessibility object's attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the current value of the attribute, nil if the attribute has no value, or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns the value of an accessibility object's attribute.",
          ""
        ],
        "def" : "hs.axuielement:attributeValue(attribute) -> value | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:attributeValue(attribute) -> value | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the current value of the attribute, nil if the attribute has no value, or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns the value of an accessibility object's attribute.",
        "name" : "attributeValue"
      },
      {
        "doc" : "Returns the count of the array of an accessibility object's attribute value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the number of items in the value for the attribute, if it is an array, or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns the count of the array of an accessibility object's attribute value.",
          ""
        ],
        "def" : "hs.axuielement:attributeValueCount(attribute) -> integer | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:attributeValueCount(attribute) -> integer | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the number of items in the value for the attribute, if it is an array, or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns the count of the array of an accessibility object's attribute value.",
        "name" : "attributeValueCount"
      },
      {
        "doc" : "Captures all of the available information for the accessibility object and its descendants and returns it in a table for inspection.\n\nParameters:\n * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)\n * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the initial accessibility object that should be visited to identify descendant elements and their attributes.\n * `withParents` - an optional boolean, default false, specifying whether or not an element's (or descendant's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.\n\nReturns:\n * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)\n\nNotes:\n* The format of the `results` table passed to the callback for this method is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.\n * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments.",
        "parameters" : [
          " * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table containing the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information)",
          " * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the initial accessibility object that should be visited to identify descendant elements and their attributes.",
          " * `withParents` - an optional boolean, default false, specifying whether or not an element's (or descendant's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.",
          ""
        ],
        "stripped_doc" : [
          "Captures all of the available information for the accessibility object and its descendants and returns it in a table for inspection.",
          ""
        ],
        "def" : "hs.axuielement:buildTree(callback, [depth], [withParents]) -> elementSearchObject",
        "notes" : [
          "* The format of the `results` table passed to the callback for this method is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.",
          " * This method is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`. Please refer to [hs.axuielement:elementSearch](#elementSearch) for details about the returned object and callback arguments."
        ],
        "signature" : "hs.axuielement:buildTree(callback, [depth], [withParents]) -> elementSearchObject",
        "type" : "Method",
        "returns" : [
          " * an elementSearchObject as described in [hs.axuielement:elementSearch](#elementSearch)",
          ""
        ],
        "desc" : "Captures all of the available information for the accessibility object and its descendants and returns it in a table for inspection.",
        "name" : "buildTree"
      },
      {
        "doc" : "Returns a table containing only those immediate children of the element that perform the specified role.\n\nParameters:\n * `role` - a string specifying the role that the returned children must perform. Example values can be found in [hs.axuielement.roles](#roles).\n\nReturns:\n * a table containing zero or more axuielementObjects.\n\nNotes:\n * only the immediate children of the object are searched.",
        "parameters" : [
          " * `role` - a string specifying the role that the returned children must perform. Example values can be found in [hs.axuielement.roles](#roles).",
          ""
        ],
        "stripped_doc" : [
          "Returns a table containing only those immediate children of the element that perform the specified role.",
          ""
        ],
        "def" : "hs.axuielement:childrenWithRole(role) -> table",
        "notes" : [
          " * only the immediate children of the object are searched."
        ],
        "signature" : "hs.axuielement:childrenWithRole(role) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing zero or more axuielementObjects.",
          ""
        ],
        "desc" : "Returns a table containing only those immediate children of the element that perform the specified role.",
        "name" : "childrenWithRole"
      },
      {
        "doc" : "Return a duplicate userdata reference to the Accessibility object.\n\nParameters:\n * None\n\nReturns:\n * a new userdata object representing a new reference to the Accessibility object.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Return a duplicate userdata reference to the Accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:copy() -> axuielementObject",
        "notes" : [

        ],
        "signature" : "hs.axuielement:copy() -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * a new userdata object representing a new reference to the Accessibility object."
        ],
        "desc" : "Return a duplicate userdata reference to the Accessibility object.",
        "name" : "copy"
      },
      {
        "doc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.\n\nParameters:\n * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.\n * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.\n * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil and an error string if no object could be identified or an accessibility error occurred\n\nNotes:\n * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs.axuielement.systemWideElement](#systemWideElement)).\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.\n * If this method is called on an axuielementObject representing an application, the search is restricted to the application.\n * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs.axuielement.systemElementAtPosition](#systemElementAtPosition).",
        "parameters" : [
          " * `x` - the x coordinate of the screen location to test. If this parameter is provided, then the `y` parameter must also be provided and the `pointTable` parameter must not be provided.",
          " * `y` - the y coordinate of the screen location to test. This parameter is required if the `x` parameter is provided.",
          " * `pointTable` - the x and y coordinates of the screen location to test provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition` (a point-table is a table with key-value pairs for keys `x` and `y`). If this parameter is provided, then separate `x` and `y` parameters must not also be present.",
          ""
        ],
        "stripped_doc" : [
          "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
          ""
        ],
        "def" : "hs.axuielement:elementAtPosition(x, y | pointTable) -> axuielementObject | nil, errString",
        "notes" : [
          " * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs.axuielement.systemWideElement](#systemWideElement)).",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
          " * If this method is called on an axuielementObject representing an application, the search is restricted to the application.",
          " * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs.axuielement.systemElementAtPosition](#systemElementAtPosition)."
        ],
        "signature" : "hs.axuielement:elementAtPosition(x, y | pointTable) -> axuielementObject | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil and an error string if no object could be identified or an accessibility error occurred",
          ""
        ],
        "desc" : "Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.",
        "name" : "elementAtPosition"
      },
      {
        "doc" : "Search for and generate a table of the accessibility elements for the attributes and descendants of this object based on the specified criteria.\n\nParameters:\n * `callback`       - a (usually) required function which will receive the results of this search. The callback should expect three arguments and return none. The arguments to the callback function will be `msg`, a string specifying how the search ended and `results`, the elementSearchObject containing the requested results, and the number of items added to the results (see `count` in `namedModifiers`). `msg` will be \"completed\" if the search completes normally, or a string starting with \"**\" if it is terminated early (see Returns: and Notes: for more details).\n * `criteria`       - an optional function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.\n * `namedModifiers` - an optional table specifying key-value pairs that further modify or control the search. This table may contain 0 or more of the following keys:\n   * `count`          - an optional integer, default `math.huge`, specifying the maximum number of matches to collect before ending the search and invoking the callback. You can continue the search to find additional elements by invoking `elementSearchObject:next()` (described below in the `Returns` section) on the return value of this method, or on the results argument passed to the callback.\n   * `depth`          - an optional integer, default `math.huge`, specifying the maximum number of steps (descendants) from the initial accessibility element the search should visit. If you know that your desired element(s) are relatively close to your starting element, setting this to a lower value can significantly speed up the search.\n   * The following are also recognized, but may impact the speed of the search, the responsiveness of Hammerspoon, or the format of the results in ways that limit further filtering and are not recommended except when you know that you require them:\n     * `asTree`         - an optional boolean, default false, and ignored if `criteria` is specified and non-empty, `objectOnly` is true, or `count` is specified. This modifier specifies whether the search results should return as an array table of tables containing each element's details (false) or as a tree where in which the root node details are the key-value pairs of the returned table and descendant elements are likewise described in subtables attached to the attribute name they belong to (true). This format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.\n     * `includeParents` - a boolean, default false, specifying whether or not parent attributes (`AXParent` and `AXTopLevelUIElement`) should be examined during the search. Note that in most cases, setting this value to true will end up traversing the entire Accessibility structure for the target application and may significantly slow down the search.\n     * `noCallback`     - an optional boolean, default false, and ignored if `callback` is not also nil, allowing you to specify nil as the callback when set to true. This feature requires setting this named argumennt to true *and* specifying the callback field as nil because starting a query from an element with a lot of descendants **WILL** block Hammerspoon and slow down the responsiveness of your computer (I've seen blocking for over 5 minutes in extreme cases) and should be used *only* when you know you are starting from close to the end of the element heirarchy.\n     * `objectOnly`     - an optional boolean, default true, specifying whether each result in the final table will be the accessibility element discovered (true) or a table containing details about the element include the attribute names, actions, etc. for the element (false). This latter format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.\n\nReturns:\n * an elementSearchObject which contains metamethods allowing you to check to see if the process has completed and cancel it early if desired. The methods include:\n   * `elementSearchObject:cancel([reason])` - cancels the current search and invokes the callback with the partial results already collected. If you specify `reason`, the `msg` argument for the callback will be `** <reason>`; otherwise it will be \"** cancelled\".\n   * `elementSearchObject:isRunning()`      - returns true if the search is currently ongoing or false if it has completed or been cancelled.\n   * `elementSearchObject:matched()`        - returns an integer specifying the number of elements which have already been found that meet the specified criteria function.\n   * `elementSearchObject:runTime()`        - returns an integer specifying the number of seconds spent performing this search. Note that this is *not* an accurate measure of how much time a given search will always take because the time will be greatly affected by how much other activity is occurring within Hammerspoon and on the users computer. Resuming a cancelled search or a search which invoked the callback because it reached `count` items with the `next` method (descibed below) will cause this number to begin increasing again to provide a cumulative total of time spent performing the search; time between when the callback is invoked and the `next` method is invoked is not included.\n   * `elementSearchObject:visited()`        - returns an integer specifying the number of elements which have been examined during the search so far.\n   * If `asTree` is false or not specified, the following additional methods will be available:\n     * `elementSearchObject:filter(criteria, [callback]) -> filterObject`\n       * returns a new table containing elements in the search results that match the specified criteria.\n         * `criteria`  - a required function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.\n         * `callback`  - an optional callback which should expect two arguments and return none. If a callback is specified, the callback will receive two arguments, a msg indicating how the callback ended (the message format matches the style defined for this method) and the filterObject which contains the matching elements.\n       * The filterObject returned by this method and passed to the callback, if defined, will support the following methods as defined here: `cancel`, `filter`, `isRunning`, `matched`, `runTime`, and `visited`.\n     * `elementSearchObject:next()` - if the search was cancelled or reached the count of matches specified, this method will continue the search where it left off. The elementSearchObject returned when the callback is next invoked will have up to `count` items added to the existing results (calls to `next` are cummulative for the total results captured in the elementSearchObject). The third ardument to the callback will be the number of items *added* to the search results, not the number of items *in* the search results.\n\nNotes:\n * This method utilizes coroutines to keep Hammerspoon responsive, but may be slow to complete if `includeParents` is true, if you do not specify `depth`, or if you start from an element that has a lot of descendants (e.g. the application element for a web browser). This is dependent entirely upon how many active accessibility elements the target application defines and where you begin your search and cannot reliably be determined up front, so you may need to experiment to find the best balance for your specific requirements.\n * The search performed is a breadth-first search, so in general earlier elements in the results table will be \"closer\" in the Accessibility hierarchy to the starting point than later elements.\n * The `elementSearchObject` returned by this method and the results passed in as the second argument to the callback function are the same object -- you can use either one in your code depending upon which makes the most sense. Results that match the criteria function are added to the `elementSearchObject` as they are found, so if you examine the object\/table returned by this method and determine that you have located the element or elements you require before the callback has been invoked, you can safely invoke the cancel method to end the search early.\n   * The exception to this is when `asTree` is true and `objectsOnly` is false and the search criteria is nil -- see [hs.axuielement:buildTree](#buildTree). In this case, the results passed to the callback will be equal to `elementSearchObject[1]`.\n * If `objectsOnly` is specified as false, it may take some time after `cancel` is invoked for the mapping of element attribute tables to the descendant elements in the results set -- this is a by product of the need to iterate through the results to match up all of the instances of each element to it's attribute table.\n * [hs.axuielement:allDescendantElements](#allDescendantElements) is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`\n * [hs.axuielement:buildTree](#buildTree) is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`",
        "parameters" : [
          " * `callback`       - a (usually) required function which will receive the results of this search. The callback should expect three arguments and return none. The arguments to the callback function will be `msg`, a string specifying how the search ended and `results`, the elementSearchObject containing the requested results, and the number of items added to the results (see `count` in `namedModifiers`). `msg` will be \"completed\" if the search completes normally, or a string starting with \"**\" if it is terminated early (see Returns: and Notes: for more details).",
          " * `criteria`       - an optional function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.",
          " * `namedModifiers` - an optional table specifying key-value pairs that further modify or control the search. This table may contain 0 or more of the following keys:",
          "   * `count`          - an optional integer, default `math.huge`, specifying the maximum number of matches to collect before ending the search and invoking the callback. You can continue the search to find additional elements by invoking `elementSearchObject:next()` (described below in the `Returns` section) on the return value of this method, or on the results argument passed to the callback.",
          "   * `depth`          - an optional integer, default `math.huge`, specifying the maximum number of steps (descendants) from the initial accessibility element the search should visit. If you know that your desired element(s) are relatively close to your starting element, setting this to a lower value can significantly speed up the search.",
          "   * The following are also recognized, but may impact the speed of the search, the responsiveness of Hammerspoon, or the format of the results in ways that limit further filtering and are not recommended except when you know that you require them:",
          "     * `asTree`         - an optional boolean, default false, and ignored if `criteria` is specified and non-empty, `objectOnly` is true, or `count` is specified. This modifier specifies whether the search results should return as an array table of tables containing each element's details (false) or as a tree where in which the root node details are the key-value pairs of the returned table and descendant elements are likewise described in subtables attached to the attribute name they belong to (true). This format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.",
          "     * `includeParents` - a boolean, default false, specifying whether or not parent attributes (`AXParent` and `AXTopLevelUIElement`) should be examined during the search. Note that in most cases, setting this value to true will end up traversing the entire Accessibility structure for the target application and may significantly slow down the search.",
          "     * `noCallback`     - an optional boolean, default false, and ignored if `callback` is not also nil, allowing you to specify nil as the callback when set to true. This feature requires setting this named argumennt to true *and* specifying the callback field as nil because starting a query from an element with a lot of descendants **WILL** block Hammerspoon and slow down the responsiveness of your computer (I've seen blocking for over 5 minutes in extreme cases) and should be used *only* when you know you are starting from close to the end of the element heirarchy.",
          "     * `objectOnly`     - an optional boolean, default true, specifying whether each result in the final table will be the accessibility element discovered (true) or a table containing details about the element include the attribute names, actions, etc. for the element (false). This latter format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.",
          ""
        ],
        "stripped_doc" : [
          "Search for and generate a table of the accessibility elements for the attributes and descendants of this object based on the specified criteria.",
          ""
        ],
        "def" : "hs.axuielement:elementSearch(callback, [criteria], [namedModifiers]) -> elementSearchObject",
        "notes" : [
          " * This method utilizes coroutines to keep Hammerspoon responsive, but may be slow to complete if `includeParents` is true, if you do not specify `depth`, or if you start from an element that has a lot of descendants (e.g. the application element for a web browser). This is dependent entirely upon how many active accessibility elements the target application defines and where you begin your search and cannot reliably be determined up front, so you may need to experiment to find the best balance for your specific requirements.",
          " * The search performed is a breadth-first search, so in general earlier elements in the results table will be \"closer\" in the Accessibility hierarchy to the starting point than later elements.",
          " * The `elementSearchObject` returned by this method and the results passed in as the second argument to the callback function are the same object -- you can use either one in your code depending upon which makes the most sense. Results that match the criteria function are added to the `elementSearchObject` as they are found, so if you examine the object\/table returned by this method and determine that you have located the element or elements you require before the callback has been invoked, you can safely invoke the cancel method to end the search early.",
          "   * The exception to this is when `asTree` is true and `objectsOnly` is false and the search criteria is nil -- see [hs.axuielement:buildTree](#buildTree). In this case, the results passed to the callback will be equal to `elementSearchObject[1]`.",
          " * If `objectsOnly` is specified as false, it may take some time after `cancel` is invoked for the mapping of element attribute tables to the descendant elements in the results set -- this is a by product of the need to iterate through the results to match up all of the instances of each element to it's attribute table.",
          " * [hs.axuielement:allDescendantElements](#allDescendantElements) is syntactic sugar for `hs.axuielement:elementSearch(callback, { [includeParents = withParents] })`",
          " * [hs.axuielement:buildTree](#buildTree) is syntactic sugar for `hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] })`"
        ],
        "signature" : "hs.axuielement:elementSearch(callback, [criteria], [namedModifiers]) -> elementSearchObject",
        "type" : "Method",
        "returns" : [
          " * an elementSearchObject which contains metamethods allowing you to check to see if the process has completed and cancel it early if desired. The methods include:",
          "   * `elementSearchObject:cancel([reason])` - cancels the current search and invokes the callback with the partial results already collected. If you specify `reason`, the `msg` argument for the callback will be `** <reason>`; otherwise it will be \"** cancelled\".",
          "   * `elementSearchObject:isRunning()`      - returns true if the search is currently ongoing or false if it has completed or been cancelled.",
          "   * `elementSearchObject:matched()`        - returns an integer specifying the number of elements which have already been found that meet the specified criteria function.",
          "   * `elementSearchObject:runTime()`        - returns an integer specifying the number of seconds spent performing this search. Note that this is *not* an accurate measure of how much time a given search will always take because the time will be greatly affected by how much other activity is occurring within Hammerspoon and on the users computer. Resuming a cancelled search or a search which invoked the callback because it reached `count` items with the `next` method (descibed below) will cause this number to begin increasing again to provide a cumulative total of time spent performing the search; time between when the callback is invoked and the `next` method is invoked is not included.",
          "   * `elementSearchObject:visited()`        - returns an integer specifying the number of elements which have been examined during the search so far.",
          "   * If `asTree` is false or not specified, the following additional methods will be available:",
          "     * `elementSearchObject:filter(criteria, [callback]) -> filterObject`",
          "       * returns a new table containing elements in the search results that match the specified criteria.",
          "         * `criteria`  - a required function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create a search function that uses [hs.axuielement:matchesCriteria](#matchesCriteria) for evaluation.",
          "         * `callback`  - an optional callback which should expect two arguments and return none. If a callback is specified, the callback will receive two arguments, a msg indicating how the callback ended (the message format matches the style defined for this method) and the filterObject which contains the matching elements.",
          "       * The filterObject returned by this method and passed to the callback, if defined, will support the following methods as defined here: `cancel`, `filter`, `isRunning`, `matched`, `runTime`, and `visited`.",
          "     * `elementSearchObject:next()` - if the search was cancelled or reached the count of matches specified, this method will continue the search where it left off. The elementSearchObject returned when the callback is next invoked will have up to `count` items added to the existing results (calls to `next` are cummulative for the total results captured in the elementSearchObject). The third ardument to the callback will be the number of items *added* to the search results, not the number of items *in* the search results.",
          ""
        ],
        "desc" : "Search for and generate a table of the accessibility elements for the attributes and descendants of this object based on the specified criteria.",
        "name" : "elementSearch"
      },
      {
        "doc" : "Returns whether the specified accessibility object's attribute can be modified.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * a boolean value indicating whether or not the value of the parameter can be modified or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "stripped_doc" : [
          "Returns whether the specified accessibility object's attribute can be modified.",
          ""
        ],
        "def" : "hs.axuielement:isAttributeSettable(attribute) -> boolean | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:isAttributeSettable(attribute) -> boolean | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the value of the parameter can be modified or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns whether the specified accessibility object's attribute can be modified.",
        "name" : "isAttributeSettable"
      },
      {
        "doc" : "Returns whether the specified accessibility object is still valid.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the accessibility object is still valid or nil and an error string if any other accessibility error occurred\n\nNotes:\n * an accessibilityObject can become invalid for a variety of reasons, including but not limited to the element referred to no longer being available (e.g. an element referring to a window or one of its descendants that has been closed) or the application terminating.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns whether the specified accessibility object is still valid.",
          ""
        ],
        "def" : "hs.axuielement:isValid() -> boolean | nil, errString",
        "notes" : [
          " * an accessibilityObject can become invalid for a variety of reasons, including but not limited to the element referred to no longer being available (e.g. an element referring to a window or one of its descendants that has been closed) or the application terminating."
        ],
        "signature" : "hs.axuielement:isValid() -> boolean | nil, errString",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the accessibility object is still valid or nil and an error string if any other accessibility error occurred",
          ""
        ],
        "desc" : "Returns whether the specified accessibility object is still valid.",
        "name" : "isValid"
      },
      {
        "doc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.\n\nParameters:\n * `criteria`  - the criteria to compare against the accessibility object\n\nReturns:\n * true if the axuielementObject matches the criteria, false if it does not.\n\nNotes:\n * the `criteria` argument must be one of the following:\n   * a single string, specifying the value the element's AXRole attribute must equal for a positive match\n   * an array table of strings specifying a list of possible values the element's AXRole attribute can equal for a positive match\n   * a table of key-value pairs specifying a more complex criteria. The table should be defined as follows:\n     * one or more of the following must be specified (though all specified must match):\n       * `attribute`              -- a string, or table of strings, specifying attributes that the element must support.\n       * `action`                 -- a string, or table of strings, specifying actions that the element must be able to perform.\n       * `parameterizedAttribute` -- a string, or table of strings, specifying parametrized attributes that the element must support.\n     * if the `attribute` key is specified, you can use one of the the following to specify a specific value the attribute must equal for a positive match. No more than one of these should be provided. If neither are present, then only the existence of the attributes specified by `attribute` are required.\n       * `value`                  -- a value, or table of values, that a specifeid attribute must equal. If it's a table, then only one of the values has to match the attribute value for a positive match. Note that if you specify more than one attribute with the `attribute` key, you must provide at least one value for each attribute in this table (order does not matter, but the match will fail if any atrribute does not match at least one value provided).\n         * when specifying a value which is itself a table with keys (e.g. frame, size, url, color, etc.) then you *must* provide the value or values as a table of tables, e.g. `{ { y = 22 } }`.\n           * only those keys which are specified within the value are checked for equality (or pattern matching). Values which are present in the attribute's value but are not specified in the comparioson value are ignored (i.e. the previous example of `y = 22` would only check the `y` component of an AXFrame attribute -- the `x`, `h`, and `w` values would be ignored).\n           * For value compoents which are numeric, e.g. `22` in the previous example, the default comparison is equality. You may change this with the `comparison` key described below in the optional keys.\n           * For possible keys when trying to match a color, see the documentation for `hs.drawing.color`.\n           * For possible keys when trying to match a URL, use `url = <string>` and\/or `filePath = <string>`. The string for the specified table key will be compared in accordance with the `pattern` optional key described below.\n         * when specifying a value which is itself a table of values (e.g. a list of axuielementObjects) you *must* provide the value or values as a table of tables, e.g. `{ { obj1, obj2 } }`.\n           * Order of the elements provided in the comparison value does not matter -- this only tests for existence within the attributes value.\n           * The test is for inclusion only -- the attribute's value may contain other elements as well, but must contain those specified within the comparison value.\n       * `nilValue`               -- a boolean, specifying that the attributes must not have an assigned value (true) or may be assigned any value except nil (false). If the `value` key is specified, this key is ignored. Note that this applies to *all* of the attributes specified with the `attribute` key.\n     * the following are optional keys and are not required:\n       * `pattern`                -- a boolean, default false, specifying whether string matches for attribute values should be evaluated with `string.match` (true) or as exact matches (false). See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console). If the `value` key is not set, than this key is ignored.\n       * `invert`                 -- a boolean, default false, specifying inverted logic for the criteria result --- if this is true and the criteria matches, evaluate criteria as false; otherwise evaluate as true.\n       * `comparison`             -- a string, default \"==\", specifying the comparison to be used when comparing numeric values. Possible comparison strings are: \"==\" for equality, \"<\" for less than, \"<=\" for less than or equal to, \">\" for greater than, \">=\" for greater than or equal to, or \"~=\" for not equal to.\n\n   * an array table of one or more key-value tables as described immediately above; the element must be a positive match for all of the individual criteria tables specified (logical AND).\n * This method is used by [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create criteria functions compatible with [hs.axuielement:elementSearch](#elementSearch).",
        "parameters" : [
          " * `criteria`  - the criteria to compare against the accessibility object",
          ""
        ],
        "stripped_doc" : [
          "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
          ""
        ],
        "def" : "hs.axuielement:matchesCriteria(criteria) -> boolean",
        "notes" : [
          " * the `criteria` argument must be one of the following:",
          "   * a single string, specifying the value the element's AXRole attribute must equal for a positive match",
          "   * an array table of strings specifying a list of possible values the element's AXRole attribute can equal for a positive match",
          "   * a table of key-value pairs specifying a more complex criteria. The table should be defined as follows:",
          "     * one or more of the following must be specified (though all specified must match):",
          "       * `attribute`              -- a string, or table of strings, specifying attributes that the element must support.",
          "       * `action`                 -- a string, or table of strings, specifying actions that the element must be able to perform.",
          "       * `parameterizedAttribute` -- a string, or table of strings, specifying parametrized attributes that the element must support.",
          "     * if the `attribute` key is specified, you can use one of the the following to specify a specific value the attribute must equal for a positive match. No more than one of these should be provided. If neither are present, then only the existence of the attributes specified by `attribute` are required.",
          "       * `value`                  -- a value, or table of values, that a specifeid attribute must equal. If it's a table, then only one of the values has to match the attribute value for a positive match. Note that if you specify more than one attribute with the `attribute` key, you must provide at least one value for each attribute in this table (order does not matter, but the match will fail if any atrribute does not match at least one value provided).",
          "         * when specifying a value which is itself a table with keys (e.g. frame, size, url, color, etc.) then you *must* provide the value or values as a table of tables, e.g. `{ { y = 22 } }`.",
          "           * only those keys which are specified within the value are checked for equality (or pattern matching). Values which are present in the attribute's value but are not specified in the comparioson value are ignored (i.e. the previous example of `y = 22` would only check the `y` component of an AXFrame attribute -- the `x`, `h`, and `w` values would be ignored).",
          "           * For value compoents which are numeric, e.g. `22` in the previous example, the default comparison is equality. You may change this with the `comparison` key described below in the optional keys.",
          "           * For possible keys when trying to match a color, see the documentation for `hs.drawing.color`.",
          "           * For possible keys when trying to match a URL, use `url = <string>` and\/or `filePath = <string>`. The string for the specified table key will be compared in accordance with the `pattern` optional key described below.",
          "         * when specifying a value which is itself a table of values (e.g. a list of axuielementObjects) you *must* provide the value or values as a table of tables, e.g. `{ { obj1, obj2 } }`.",
          "           * Order of the elements provided in the comparison value does not matter -- this only tests for existence within the attributes value.",
          "           * The test is for inclusion only -- the attribute's value may contain other elements as well, but must contain those specified within the comparison value.",
          "       * `nilValue`               -- a boolean, specifying that the attributes must not have an assigned value (true) or may be assigned any value except nil (false). If the `value` key is specified, this key is ignored. Note that this applies to *all* of the attributes specified with the `attribute` key.",
          "     * the following are optional keys and are not required:",
          "       * `pattern`                -- a boolean, default false, specifying whether string matches for attribute values should be evaluated with `string.match` (true) or as exact matches (false). See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console). If the `value` key is not set, than this key is ignored.",
          "       * `invert`                 -- a boolean, default false, specifying inverted logic for the criteria result --- if this is true and the criteria matches, evaluate criteria as false; otherwise evaluate as true.",
          "       * `comparison`             -- a string, default \"==\", specifying the comparison to be used when comparing numeric values. Possible comparison strings are: \"==\" for equality, \"<\" for less than, \"<=\" for less than or equal to, \">\" for greater than, \">=\" for greater than or equal to, or \"~=\" for not equal to.",
          "",
          "   * an array table of one or more key-value tables as described immediately above; the element must be a positive match for all of the individual criteria tables specified (logical AND).",
          " * This method is used by [hs.axuielement.searchCriteriaFunction](#searchCriteriaFunction) to create criteria functions compatible with [hs.axuielement:elementSearch](#elementSearch)."
        ],
        "signature" : "hs.axuielement:matchesCriteria(criteria) -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the axuielementObject matches the criteria, false if it does not.",
          ""
        ],
        "desc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
        "name" : "matchesCriteria"
      },
      {
        "doc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all parameterized attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:parameterizedAttributeNames() -> table | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:parameterizedAttributeNames() -> table | nil, errString",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all parameterized attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
        "name" : "parameterizedAttributeNames"
      },
      {
        "doc" : "Returns the value of an accessibility object's parameterized attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).\n * `parameter` - the parameter required by the paramaterized attribute.\n\nReturns:\n * the current value of the parameterized attribute, nil if the parameterized attribute has no value, or nil and an error string if an accessibility error occurred\n\nNotes:\n * The specific parameter required for a each parameterized attribute is different and is often application specific thus requiring some experimentation. Notes regarding identified parameter types and thoughts on some still being investigated will be provided in the Hammerspoon Wiki, hopefully shortly after this module becomes part of a Hammerspoon release.",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).",
          " * `parameter` - the parameter required by the paramaterized attribute.",
          ""
        ],
        "stripped_doc" : [
          "Returns the value of an accessibility object's parameterized attribute.",
          ""
        ],
        "def" : "hs.axuielement:parameterizedAttributeValue(attribute, parameter) -> value | nil, errString",
        "notes" : [
          " * The specific parameter required for a each parameterized attribute is different and is often application specific thus requiring some experimentation. Notes regarding identified parameter types and thoughts on some still being investigated will be provided in the Hammerspoon Wiki, hopefully shortly after this module becomes part of a Hammerspoon release."
        ],
        "signature" : "hs.axuielement:parameterizedAttributeValue(attribute, parameter) -> value | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the current value of the parameterized attribute, nil if the parameterized attribute has no value, or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Returns the value of an accessibility object's parameterized attribute.",
        "name" : "parameterizedAttributeValue"
      },
      {
        "doc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.\n\nParameters:\n * None\n\nReturns:\n * a table containing this object and 0 or more parent objects representing the path from the root object to this element.\n\nNotes:\n * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most immediate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.\n * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.",
          ""
        ],
        "def" : "hs.axuielement:path() -> table",
        "notes" : [
          " * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most immediate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.",
          " * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)"
        ],
        "signature" : "hs.axuielement:path() -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing this object and 0 or more parent objects representing the path from the root object to this element.",
          ""
        ],
        "desc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.",
        "name" : "path"
      },
      {
        "doc" : "Requests that the specified accessibility object perform the specified action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).\n\nReturns:\n * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false; otherwise returns nil and an error string if an accessibility error occurred\n\nNotes:\n * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil.",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs.axuielement:actionNames](#actionNames).",
          ""
        ],
        "stripped_doc" : [
          "Requests that the specified accessibility object perform the specified action.",
          ""
        ],
        "def" : "hs.axuielement:performAction(action) -> axuielement | false | nil, errString",
        "notes" : [
          " * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil."
        ],
        "signature" : "hs.axuielement:performAction(action) -> axuielement | false | nil, errString",
        "type" : "Method",
        "returns" : [
          " * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false; otherwise returns nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Requests that the specified accessibility object perform the specified action.",
        "name" : "performAction"
      },
      {
        "doc" : "Returns the process ID associated with the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * the process ID for the application to which the accessibility object ultimately belongs or nil and an error string if an accessibility error occurred",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns the process ID associated with the specified accessibility object.",
          ""
        ],
        "def" : "hs.axuielement:pid() -> integer | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:pid() -> integer | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the process ID for the application to which the accessibility object ultimately belongs or nil and an error string if an accessibility error occurred"
        ],
        "desc" : "Returns the process ID associated with the specified accessibility object.",
        "name" : "pid"
      },
      {
        "doc" : "Sets the accessibility object's attribute to the specified value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).\n * `value`     - the value to assign to the attribute\n\nReturns:\n * the axuielementObject on success; nil and an error string if the attribute could not be set or an accessibility error occurred.",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs.axuielement:attributeNames](#attributeNames).",
          " * `value`     - the value to assign to the attribute",
          ""
        ],
        "stripped_doc" : [
          "Sets the accessibility object's attribute to the specified value.",
          ""
        ],
        "def" : "hs.axuielement:setAttributeValue(attribute, value) -> axuielementObject  | nil, errString",
        "notes" : [

        ],
        "signature" : "hs.axuielement:setAttributeValue(attribute, value) -> axuielementObject  | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject on success; nil and an error string if the attribute could not be set or an accessibility error occurred."
        ],
        "desc" : "Sets the accessibility object's attribute to the specified value.",
        "name" : "setAttributeValue"
      },
      {
        "doc" : "Sets the timeout value used accessibility queries performed from this element.\n\nParameters:\n * `value` - the number of seconds for the new timeout value. Must be 0 or positive.\n\nReturns:\n * the axuielementObject or nil and an error string if an accessibility error occurred\n\nNotes:\n * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs.axuielement.systemWideElement](#systemWideElement).\n * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refer to the identical accessibiity item are not affected.\n * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement.",
        "parameters" : [
          " * `value` - the number of seconds for the new timeout value. Must be 0 or positive.",
          ""
        ],
        "stripped_doc" : [
          "Sets the timeout value used accessibility queries performed from this element.",
          ""
        ],
        "def" : "hs.axuielement:setTimeout(value) -> axuielementObject | nil, errString",
        "notes" : [
          " * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs.axuielement.systemWideElement](#systemWideElement).",
          " * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refer to the identical accessibiity item are not affected.",
          " * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement."
        ],
        "signature" : "hs.axuielement:setTimeout(value) -> axuielementObject | nil, errString",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject or nil and an error string if an accessibility error occurred",
          ""
        ],
        "desc" : "Sets the timeout value used accessibility queries performed from this element.",
        "name" : "setTimeout"
      }
    ],
    "name" : "hs.axuielement"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.\n\nParameters:\n * None\n\nReturns:\n * a table with key-value pairs where the keys correspond to the undocumented Core Foundation functions required by this module to support AXTextMarker and AXTextMarkerRange and the value will be a boolean indicating whether the function exists in the currently loaded frameworks.\n\nNotes:\n * the functions are defined within the HIServices framework which is part of the ApplicationServices framework, so it is expected that the necessary functions will always be available; however, if you ever receive an error message from a function or method within this submodule of the form \"CF function AX... undefined\", please see the submodule heading documentation for a description of the information, including that which this function provides, that should be included in any error report you submit.\n * This is for debugging purposes and is not expected to be used often.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker._functionCheck() -> table",
        "notes" : [
          " * the functions are defined within the HIServices framework which is part of the ApplicationServices framework, so it is expected that the necessary functions will always be available; however, if you ever receive an error message from a function or method within this submodule of the form \"CF function AX... undefined\", please see the submodule heading documentation for a description of the information, including that which this function provides, that should be included in any error report you submit.",
          " * This is for debugging purposes and is not expected to be used often."
        ],
        "signature" : "hs.axuielement.axtextmarker._functionCheck() -> table",
        "type" : "Function",
        "returns" : [
          " * a table with key-value pairs where the keys correspond to the undocumented Core Foundation functions required by this module to support AXTextMarker and AXTextMarkerRange and the value will be a boolean indicating whether the function exists in the currently loaded frameworks.",
          ""
        ],
        "desc" : "Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.",
        "name" : "_functionCheck"
      },
      {
        "doc" : "Returns a string containing the opaque binary data contained within the axTextMarkerObject\n\nParameters:\n * None\n\nReturns:\n *  a string containing the opaque binary data contained within the axTextMarkerObject\n\nNotes:\n * the string will likely contain invalid UTF8 code sequences or unprintable ascii values; to see the data in decimal or hexidecimal form you can use:\n    string.byte(hs.axuielement.axtextmarker:bytes(), 1, hs.axuielement.axtextmarker:length())\n    -- or\n    hs.utf8.hexDump(hs.axuielement.axtextmarker:bytes())\n * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a string containing the opaque binary data contained within the axTextMarkerObject",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:bytes() -> string | nil, errorString",
        "notes" : [
          " * the string will likely contain invalid UTF8 code sequences or unprintable ascii values; to see the data in decimal or hexidecimal form you can use:",
          "    string.byte(hs.axuielement.axtextmarker:bytes(), 1, hs.axuielement.axtextmarker:length())",
          "    -- or",
          "    hs.utf8.hexDump(hs.axuielement.axtextmarker:bytes())",
          " * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."
        ],
        "signature" : "hs.axuielement.axtextmarker:bytes() -> string | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  a string containing the opaque binary data contained within the axTextMarkerObject",
          ""
        ],
        "desc" : "Returns a string containing the opaque binary data contained within the axTextMarkerObject",
        "name" : "bytes"
      },
      {
        "doc" : "Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.\n\nParameters:\n * None\n\nReturns:\n *  an integer specifying the number of bytes in the data portion of the axTextMarkerObject\n\nNotes:\n * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:length() -> integer | nil, errorString",
        "notes" : [
          " * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."
        ],
        "signature" : "hs.axuielement.axtextmarker:length() -> integer | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  an integer specifying the number of bytes in the data portion of the axTextMarkerObject",
          ""
        ],
        "desc" : "Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.",
        "name" : "length"
      },
      {
        "doc" : "Returns the starting marker for an axTextMarkerRangeObject\n\nParameters:\n * None\n\nReturns:\n *  the starting marker for an axTextMarkerRangeObject",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns the starting marker for an axTextMarkerRangeObject",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:startMarker() -> axTextMarkerObject | nil, errorString",
        "notes" : [

        ],
        "signature" : "hs.axuielement.axtextmarker:startMarker() -> axTextMarkerObject | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  the starting marker for an axTextMarkerRangeObject"
        ],
        "desc" : "Returns the starting marker for an axTextMarkerRangeObject",
        "name" : "startMarker"
      },
      {
        "doc" : "Returns the ending marker for an axTextMarkerRangeObject\n\nParameters:\n * None\n\nReturns:\n *  the ending marker for an axTextMarkerRangeObject",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns the ending marker for an axTextMarkerRangeObject",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:endMarker() -> axTextMarkerObject | nil, errorString",
        "notes" : [

        ],
        "signature" : "hs.axuielement.axtextmarker:endMarker() -> axTextMarkerObject | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  the ending marker for an axTextMarkerRangeObject"
        ],
        "desc" : "Returns the ending marker for an axTextMarkerRangeObject",
        "name" : "endMarker"
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "This submodule allows hs.axuielement to support using AXTextMarker and AXTextMarkerRange objects as parameters for parameterized Accessibility attributes with applications that support them.",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [
      {
        "doc" : "Creates a new AXTextMarker object from the string of binary data provided\n\nParameters:\n * `string` - a string containing 1 or more bytes of data for the AXTextMarker object\n\nReturns:\n * a new axTextMarkerObject or nil and a string description if there was an error\n\nNotes:\n * This function is included primarily for testing and debugging purposes -- in general you will probably never use this constructor; AXTextMarker objects appear to be mostly application dependant and have no meaning external to the application from which it was created.",
        "parameters" : [
          " * `string` - a string containing 1 or more bytes of data for the AXTextMarker object",
          ""
        ],
        "stripped_doc" : [
          "Creates a new AXTextMarker object from the string of binary data provided",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker.newMarker(string) -> axTextMarkerObject | nil, errorString",
        "notes" : [
          " * This function is included primarily for testing and debugging purposes -- in general you will probably never use this constructor; AXTextMarker objects appear to be mostly application dependant and have no meaning external to the application from which it was created."
        ],
        "signature" : "hs.axuielement.axtextmarker.newMarker(string) -> axTextMarkerObject | nil, errorString",
        "type" : "Constructor",
        "returns" : [
          " * a new axTextMarkerObject or nil and a string description if there was an error",
          ""
        ],
        "desc" : "Creates a new AXTextMarker object from the string of binary data provided",
        "name" : "newMarker"
      },
      {
        "doc" : "Creates a new AXTextMarkerRange object from the start and end markers provided\n\nParameters:\n * `startMarker` - an axTextMarkerObject representing the start of the range to be created\n * `endMarker`   - an axTextMarkerObject representing the end of the range to be created\n\nReturns:\n * a new axTextMarkerRangeObject or nil and a string description if there was an error\n\nNotes:\n * this constructor can be used to create a range from axTextMarkerObjects obtained from an application to specify a new range for a paramterized attribute. As a simple example (it is hoped that more will be added to the Hammerspoon wiki shortly):\n    ```lua\n    s = hs.axuielement.applicationElement(hs.application(\"Safari\"))\n    -- for a window displaying the DuckDuckGo main search page, this gets the\n    -- primary display area. Other pages may vary and you should build your\n    -- object as necessary for your target.\n    c = s(\"AXMainWindow\")(\"AXSections\")[1].SectionObject[1][1]\n    start = c(\"AXStartTextMarker\") -- get the text marker for the start of this element\n    ending = c(\"AXNextLineEndTextMarkerForTextMarker\", start) -- get the next end of line marker\n    print(c(\"AXStringForTextMarkerRange\", hs.axuielement.axtextmarker.newRange(start, ending)))\n    -- outputs \"Privacy, simplified.\" to the Hammerspoon console```\n * The specific attributes and parameterized attributes supported by a given application differ and can be discovered with the `hs.axuielement:getAttributeNames` and `hs.axuielement:getParameterizedAttributeNames` methods.",
        "parameters" : [
          " * `startMarker` - an axTextMarkerObject representing the start of the range to be created",
          " * `endMarker`   - an axTextMarkerObject representing the end of the range to be created",
          ""
        ],
        "stripped_doc" : [
          "Creates a new AXTextMarkerRange object from the start and end markers provided",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker.newRange(startMarker, endMarker) -> axTextMarkerRangeObject | nil, errorString",
        "notes" : [
          " * this constructor can be used to create a range from axTextMarkerObjects obtained from an application to specify a new range for a paramterized attribute. As a simple example (it is hoped that more will be added to the Hammerspoon wiki shortly):",
          "    ```lua",
          "    s = hs.axuielement.applicationElement(hs.application(\"Safari\"))",
          "    -- for a window displaying the DuckDuckGo main search page, this gets the",
          "    -- primary display area. Other pages may vary and you should build your",
          "    -- object as necessary for your target.",
          "    c = s(\"AXMainWindow\")(\"AXSections\")[1].SectionObject[1][1]",
          "    start = c(\"AXStartTextMarker\") -- get the text marker for the start of this element",
          "    ending = c(\"AXNextLineEndTextMarkerForTextMarker\", start) -- get the next end of line marker",
          "    print(c(\"AXStringForTextMarkerRange\", hs.axuielement.axtextmarker.newRange(start, ending)))",
          "    -- outputs \"Privacy, simplified.\" to the Hammerspoon console```",
          " * The specific attributes and parameterized attributes supported by a given application differ and can be discovered with the `hs.axuielement:getAttributeNames` and `hs.axuielement:getParameterizedAttributeNames` methods."
        ],
        "signature" : "hs.axuielement.axtextmarker.newRange(startMarker, endMarker) -> axTextMarkerRangeObject | nil, errorString",
        "type" : "Constructor",
        "returns" : [
          " * a new axTextMarkerRangeObject or nil and a string description if there was an error",
          ""
        ],
        "desc" : "Creates a new AXTextMarkerRange object from the start and end markers provided",
        "name" : "newRange"
      }
    ],
    "doc" : "This submodule allows hs.axuielement to support using AXTextMarker and AXTextMarkerRange objects as parameters for parameterized Accessibility attributes with applications that support them.\n\nMost Accessibility object values correspond to the common data types found in most programming languages -- strings, numbers, tables (arrays and dictionaries), etc. AXTextMarker and AXTextMarkerRange types are application specific and do not have a direct mapping to a simple data type. The description I've found most apt comes from comments within the Chromium source for the Mac version of their browser:\n\n> \/\/ A serialization of a position as POD. Not for sharing on disk or sharing\n> \/\/ across thread or process boundaries, just for passing a position to an\n> \/\/ API that works with positions as opaque objects.\n\nThis submodule allows Lua to represent these as userdata which can be passed in to parameterized attributes for the appliction from which they were retrieved. Examples are expected to be added to the Hammerspoon wiki soon.\n\nAs this submodule utilizes private and undocumented functions in the HIServices framework, if you receive an error using any of these functions or methods indicating an undefined CF function (the function or method will return nil and a string of the format \"CF function AX... undefined\"), please make sure to include the output of the following in any issue you submit to the Hammerspoon github page (enter these into the Hammerspoon console):\n\n    hs.inspect(hs.axuielement.axtextmarker._functionCheck())\n    hs.inspect(hs.processInfo)\n    hs.host.operatingSystemVersionString()",
    "Method" : [

    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.\n\nParameters:\n * None\n\nReturns:\n * a table with key-value pairs where the keys correspond to the undocumented Core Foundation functions required by this module to support AXTextMarker and AXTextMarkerRange and the value will be a boolean indicating whether the function exists in the currently loaded frameworks.\n\nNotes:\n * the functions are defined within the HIServices framework which is part of the ApplicationServices framework, so it is expected that the necessary functions will always be available; however, if you ever receive an error message from a function or method within this submodule of the form \"CF function AX... undefined\", please see the submodule heading documentation for a description of the information, including that which this function provides, that should be included in any error report you submit.\n * This is for debugging purposes and is not expected to be used often.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker._functionCheck() -> table",
        "notes" : [
          " * the functions are defined within the HIServices framework which is part of the ApplicationServices framework, so it is expected that the necessary functions will always be available; however, if you ever receive an error message from a function or method within this submodule of the form \"CF function AX... undefined\", please see the submodule heading documentation for a description of the information, including that which this function provides, that should be included in any error report you submit.",
          " * This is for debugging purposes and is not expected to be used often."
        ],
        "signature" : "hs.axuielement.axtextmarker._functionCheck() -> table",
        "type" : "Function",
        "returns" : [
          " * a table with key-value pairs where the keys correspond to the undocumented Core Foundation functions required by this module to support AXTextMarker and AXTextMarkerRange and the value will be a boolean indicating whether the function exists in the currently loaded frameworks.",
          ""
        ],
        "desc" : "Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.",
        "name" : "_functionCheck"
      },
      {
        "doc" : "Returns a string containing the opaque binary data contained within the axTextMarkerObject\n\nParameters:\n * None\n\nReturns:\n *  a string containing the opaque binary data contained within the axTextMarkerObject\n\nNotes:\n * the string will likely contain invalid UTF8 code sequences or unprintable ascii values; to see the data in decimal or hexidecimal form you can use:\n    string.byte(hs.axuielement.axtextmarker:bytes(), 1, hs.axuielement.axtextmarker:length())\n    -- or\n    hs.utf8.hexDump(hs.axuielement.axtextmarker:bytes())\n * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns a string containing the opaque binary data contained within the axTextMarkerObject",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:bytes() -> string | nil, errorString",
        "notes" : [
          " * the string will likely contain invalid UTF8 code sequences or unprintable ascii values; to see the data in decimal or hexidecimal form you can use:",
          "    string.byte(hs.axuielement.axtextmarker:bytes(), 1, hs.axuielement.axtextmarker:length())",
          "    -- or",
          "    hs.utf8.hexDump(hs.axuielement.axtextmarker:bytes())",
          " * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."
        ],
        "signature" : "hs.axuielement.axtextmarker:bytes() -> string | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  a string containing the opaque binary data contained within the axTextMarkerObject",
          ""
        ],
        "desc" : "Returns a string containing the opaque binary data contained within the axTextMarkerObject",
        "name" : "bytes"
      },
      {
        "doc" : "Returns the ending marker for an axTextMarkerRangeObject\n\nParameters:\n * None\n\nReturns:\n *  the ending marker for an axTextMarkerRangeObject",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns the ending marker for an axTextMarkerRangeObject",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:endMarker() -> axTextMarkerObject | nil, errorString",
        "notes" : [

        ],
        "signature" : "hs.axuielement.axtextmarker:endMarker() -> axTextMarkerObject | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  the ending marker for an axTextMarkerRangeObject"
        ],
        "desc" : "Returns the ending marker for an axTextMarkerRangeObject",
        "name" : "endMarker"
      },
      {
        "doc" : "Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.\n\nParameters:\n * None\n\nReturns:\n *  an integer specifying the number of bytes in the data portion of the axTextMarkerObject\n\nNotes:\n * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:length() -> integer | nil, errorString",
        "notes" : [
          " * As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."
        ],
        "signature" : "hs.axuielement.axtextmarker:length() -> integer | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  an integer specifying the number of bytes in the data portion of the axTextMarkerObject",
          ""
        ],
        "desc" : "Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.",
        "name" : "length"
      },
      {
        "doc" : "Returns the starting marker for an axTextMarkerRangeObject\n\nParameters:\n * None\n\nReturns:\n *  the starting marker for an axTextMarkerRangeObject",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns the starting marker for an axTextMarkerRangeObject",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker:startMarker() -> axTextMarkerObject | nil, errorString",
        "notes" : [

        ],
        "signature" : "hs.axuielement.axtextmarker:startMarker() -> axTextMarkerObject | nil, errorString",
        "type" : "Function",
        "returns" : [
          " *  the starting marker for an axTextMarkerRangeObject"
        ],
        "desc" : "Returns the starting marker for an axTextMarkerRangeObject",
        "name" : "startMarker"
      },
      {
        "doc" : "Creates a new AXTextMarker object from the string of binary data provided\n\nParameters:\n * `string` - a string containing 1 or more bytes of data for the AXTextMarker object\n\nReturns:\n * a new axTextMarkerObject or nil and a string description if there was an error\n\nNotes:\n * This function is included primarily for testing and debugging purposes -- in general you will probably never use this constructor; AXTextMarker objects appear to be mostly application dependant and have no meaning external to the application from which it was created.",
        "parameters" : [
          " * `string` - a string containing 1 or more bytes of data for the AXTextMarker object",
          ""
        ],
        "stripped_doc" : [
          "Creates a new AXTextMarker object from the string of binary data provided",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker.newMarker(string) -> axTextMarkerObject | nil, errorString",
        "notes" : [
          " * This function is included primarily for testing and debugging purposes -- in general you will probably never use this constructor; AXTextMarker objects appear to be mostly application dependant and have no meaning external to the application from which it was created."
        ],
        "signature" : "hs.axuielement.axtextmarker.newMarker(string) -> axTextMarkerObject | nil, errorString",
        "type" : "Constructor",
        "returns" : [
          " * a new axTextMarkerObject or nil and a string description if there was an error",
          ""
        ],
        "desc" : "Creates a new AXTextMarker object from the string of binary data provided",
        "name" : "newMarker"
      },
      {
        "doc" : "Creates a new AXTextMarkerRange object from the start and end markers provided\n\nParameters:\n * `startMarker` - an axTextMarkerObject representing the start of the range to be created\n * `endMarker`   - an axTextMarkerObject representing the end of the range to be created\n\nReturns:\n * a new axTextMarkerRangeObject or nil and a string description if there was an error\n\nNotes:\n * this constructor can be used to create a range from axTextMarkerObjects obtained from an application to specify a new range for a paramterized attribute. As a simple example (it is hoped that more will be added to the Hammerspoon wiki shortly):\n    ```lua\n    s = hs.axuielement.applicationElement(hs.application(\"Safari\"))\n    -- for a window displaying the DuckDuckGo main search page, this gets the\n    -- primary display area. Other pages may vary and you should build your\n    -- object as necessary for your target.\n    c = s(\"AXMainWindow\")(\"AXSections\")[1].SectionObject[1][1]\n    start = c(\"AXStartTextMarker\") -- get the text marker for the start of this element\n    ending = c(\"AXNextLineEndTextMarkerForTextMarker\", start) -- get the next end of line marker\n    print(c(\"AXStringForTextMarkerRange\", hs.axuielement.axtextmarker.newRange(start, ending)))\n    -- outputs \"Privacy, simplified.\" to the Hammerspoon console```\n * The specific attributes and parameterized attributes supported by a given application differ and can be discovered with the `hs.axuielement:getAttributeNames` and `hs.axuielement:getParameterizedAttributeNames` methods.",
        "parameters" : [
          " * `startMarker` - an axTextMarkerObject representing the start of the range to be created",
          " * `endMarker`   - an axTextMarkerObject representing the end of the range to be created",
          ""
        ],
        "stripped_doc" : [
          "Creates a new AXTextMarkerRange object from the start and end markers provided",
          ""
        ],
        "def" : "hs.axuielement.axtextmarker.newRange(startMarker, endMarker) -> axTextMarkerRangeObject | nil, errorString",
        "notes" : [
          " * this constructor can be used to create a range from axTextMarkerObjects obtained from an application to specify a new range for a paramterized attribute. As a simple example (it is hoped that more will be added to the Hammerspoon wiki shortly):",
          "    ```lua",
          "    s = hs.axuielement.applicationElement(hs.application(\"Safari\"))",
          "    -- for a window displaying the DuckDuckGo main search page, this gets the",
          "    -- primary display area. Other pages may vary and you should build your",
          "    -- object as necessary for your target.",
          "    c = s(\"AXMainWindow\")(\"AXSections\")[1].SectionObject[1][1]",
          "    start = c(\"AXStartTextMarker\") -- get the text marker for the start of this element",
          "    ending = c(\"AXNextLineEndTextMarkerForTextMarker\", start) -- get the next end of line marker",
          "    print(c(\"AXStringForTextMarkerRange\", hs.axuielement.axtextmarker.newRange(start, ending)))",
          "    -- outputs \"Privacy, simplified.\" to the Hammerspoon console```",
          " * The specific attributes and parameterized attributes supported by a given application differ and can be discovered with the `hs.axuielement:getAttributeNames` and `hs.axuielement:getParameterizedAttributeNames` methods."
        ],
        "signature" : "hs.axuielement.axtextmarker.newRange(startMarker, endMarker) -> axTextMarkerRangeObject | nil, errorString",
        "type" : "Constructor",
        "returns" : [
          " * a new axTextMarkerRangeObject or nil and a string description if there was an error",
          ""
        ],
        "desc" : "Creates a new AXTextMarkerRange object from the start and end markers provided",
        "name" : "newRange"
      }
    ],
    "name" : "hs.axuielement.axtextmarker"
  },
  {
    "Constant" : [
      {
        "doc" : "A table of common accessibility object notification names, provided for reference.\n\nNotes:\n * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them.",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object notification names, provided for reference.",
          ""
        ],
        "def" : "hs.axuielement.observer.notifications[]",
        "notes" : [
          " * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs.axuielement.observer.notifications[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object notification names, provided for reference.",
        "name" : "notifications"
      }
    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way.",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [
      {
        "doc" : "Creates a new observer object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.\n\nNotes:\n * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`\n * If you already have an `hs.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs.axuielement:pid()`.",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "stripped_doc" : [
          "Creates a new observer object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs.axuielement.observer.new(pid) -> observerObject",
        "notes" : [
          " * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`",
          " * If you already have an `hs.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs.axuielement:pid()`."
        ],
        "signature" : "hs.axuielement.observer.new(pid) -> observerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.",
          ""
        ],
        "desc" : "Creates a new observer object for the application with the specified process ID.",
        "name" : "new"
      }
    ],
    "doc" : "This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way.",
    "Method" : [
      {
        "doc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is already running",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Start observing the application and trigger callbacks for the elements and notifications assigned.",
          ""
        ],
        "def" : "hs.axuielement.observer:start() -> observerObject",
        "notes" : [
          " * This method does nothing if the observer is already running"
        ],
        "signature" : "hs.axuielement.observer:start() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "desc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.",
        "name" : "start"
      },
      {
        "doc" : "Stop observing the application; no further callbacks will be generated.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is not currently running",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Stop observing the application; no further callbacks will be generated.",
          ""
        ],
        "def" : "hs.axuielement.observer:stop() -> observerObject",
        "notes" : [
          " * This method does nothing if the observer is not currently running"
        ],
        "signature" : "hs.axuielement.observer:stop() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "desc" : "Stop observing the application; no further callbacks will be generated.",
        "name" : "stop"
      },
      {
        "doc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the observer is currently active.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
          ""
        ],
        "def" : "hs.axuielement.observer:isRunning() -> boolean",
        "notes" : [

        ],
        "signature" : "hs.axuielement.observer:isRunning() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the observer is currently active."
        ],
        "desc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
        "name" : "isRunning"
      },
      {
        "doc" : "Get or set the callback for the observer.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the callback function the observer will invoke when the assigned elements generate notifications.\n\nReturns:\n * If an argument is provided, the observerObject; otherwise the current value.\n\nNotes:\n * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:\n   * the observerObject itself\n   * the `hs.axuielement` object for the accessibility element which generated the notification\n   * a string specifying the specific notification which was received\n   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided.",
        "parameters" : [
          " * `fn` - a function, or an explicit nil to remove, specifying the callback function the observer will invoke when the assigned elements generate notifications.",
          ""
        ],
        "stripped_doc" : [
          "Get or set the callback for the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:callback([fn]) -> observerObject | fn | nil",
        "notes" : [
          " * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:",
          "   * the observerObject itself",
          "   * the `hs.axuielement` object for the accessibility element which generated the notification",
          "   * a string specifying the specific notification which was received",
          "   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."
        ],
        "signature" : "hs.axuielement.observer:callback([fn]) -> observerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the observerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the callback for the observer.",
        "name" : "callback"
      },
      {
        "doc" : "Registers the specified notification for the specified accesibility element with the observer.\n\nParameters:\n * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be registered\n\nNotes:\n * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.\n * if the specified element and notification string are already registered, this method does nothing.\n * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them.",
        "parameters" : [
          " * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "stripped_doc" : [
          "Registers the specified notification for the specified accesibility element with the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "notes" : [
          " * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.",
          " * if the specified element and notification string are already registered, this method does nothing.",
          " * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be registered",
          ""
        ],
        "desc" : "Registers the specified notification for the specified accesibility element with the observer.",
        "name" : "addWatcher"
      },
      {
        "doc" : "Unregisters the specified notification for the specified accessibility element from the observer.\n\nParameters:\n * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be unregistered\n\nNotes:\n * if the specified element and notification string are not currently registered with the observer, this method does nothing.",
        "parameters" : [
          " * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "stripped_doc" : [
          "Unregisters the specified notification for the specified accessibility element from the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "notes" : [
          " * if the specified element and notification string are not currently registered with the observer, this method does nothing."
        ],
        "signature" : "hs.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be unregistered",
          ""
        ],
        "desc" : "Unregisters the specified notification for the specified accessibility element from the observer.",
        "name" : "removeWatcher"
      },
      {
        "doc" : "Returns a table of the notifications currently registered with the observer.\n\nParameters:\n * `element` - an optional `hs.axuielement` to return a list of registered notifications for.\n\nReturns:\n * a table containing the currently registered notifications\n\nNotes:\n * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.\n * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element.",
        "parameters" : [
          " * `element` - an optional `hs.axuielement` to return a list of registered notifications for.",
          ""
        ],
        "stripped_doc" : [
          "Returns a table of the notifications currently registered with the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:watching([element]) -> table",
        "notes" : [
          " * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.",
          " * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element."
        ],
        "signature" : "hs.axuielement.observer:watching([element]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing the currently registered notifications",
          ""
        ],
        "desc" : "Returns a table of the notifications currently registered with the observer.",
        "name" : "watching"
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "A table of common accessibility object notification names, provided for reference.\n\nNotes:\n * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them.",
        "parameters" : [

        ],
        "stripped_doc" : [
          "A table of common accessibility object notification names, provided for reference.",
          ""
        ],
        "def" : "hs.axuielement.observer.notifications[]",
        "notes" : [
          " * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs.axuielement.observer.notifications[]",
        "type" : "Constant",
        "returns" : [

        ],
        "desc" : "A table of common accessibility object notification names, provided for reference.",
        "name" : "notifications"
      },
      {
        "doc" : "Creates a new observer object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.\n\nNotes:\n * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`\n * If you already have an `hs.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs.axuielement:pid()`.",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "stripped_doc" : [
          "Creates a new observer object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs.axuielement.observer.new(pid) -> observerObject",
        "notes" : [
          " * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`",
          " * If you already have an `hs.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs.axuielement:pid()`."
        ],
        "signature" : "hs.axuielement.observer.new(pid) -> observerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.",
          ""
        ],
        "desc" : "Creates a new observer object for the application with the specified process ID.",
        "name" : "new"
      },
      {
        "doc" : "Registers the specified notification for the specified accesibility element with the observer.\n\nParameters:\n * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be registered\n\nNotes:\n * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.\n * if the specified element and notification string are already registered, this method does nothing.\n * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them.",
        "parameters" : [
          " * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "stripped_doc" : [
          "Registers the specified notification for the specified accesibility element with the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "notes" : [
          " * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.",
          " * if the specified element and notification string are already registered, this method does nothing.",
          " * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be registered",
          ""
        ],
        "desc" : "Registers the specified notification for the specified accesibility element with the observer.",
        "name" : "addWatcher"
      },
      {
        "doc" : "Get or set the callback for the observer.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the callback function the observer will invoke when the assigned elements generate notifications.\n\nReturns:\n * If an argument is provided, the observerObject; otherwise the current value.\n\nNotes:\n * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:\n   * the observerObject itself\n   * the `hs.axuielement` object for the accessibility element which generated the notification\n   * a string specifying the specific notification which was received\n   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided.",
        "parameters" : [
          " * `fn` - a function, or an explicit nil to remove, specifying the callback function the observer will invoke when the assigned elements generate notifications.",
          ""
        ],
        "stripped_doc" : [
          "Get or set the callback for the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:callback([fn]) -> observerObject | fn | nil",
        "notes" : [
          " * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:",
          "   * the observerObject itself",
          "   * the `hs.axuielement` object for the accessibility element which generated the notification",
          "   * a string specifying the specific notification which was received",
          "   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."
        ],
        "signature" : "hs.axuielement.observer:callback([fn]) -> observerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the observerObject; otherwise the current value.",
          ""
        ],
        "desc" : "Get or set the callback for the observer.",
        "name" : "callback"
      },
      {
        "doc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the observer is currently active.",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
          ""
        ],
        "def" : "hs.axuielement.observer:isRunning() -> boolean",
        "notes" : [

        ],
        "signature" : "hs.axuielement.observer:isRunning() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the observer is currently active."
        ],
        "desc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
        "name" : "isRunning"
      },
      {
        "doc" : "Unregisters the specified notification for the specified accessibility element from the observer.\n\nParameters:\n * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be unregistered\n\nNotes:\n * if the specified element and notification string are not currently registered with the observer, this method does nothing.",
        "parameters" : [
          " * `element`      - the `hs.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "stripped_doc" : [
          "Unregisters the specified notification for the specified accessibility element from the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "notes" : [
          " * if the specified element and notification string are not currently registered with the observer, this method does nothing."
        ],
        "signature" : "hs.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be unregistered",
          ""
        ],
        "desc" : "Unregisters the specified notification for the specified accessibility element from the observer.",
        "name" : "removeWatcher"
      },
      {
        "doc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is already running",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Start observing the application and trigger callbacks for the elements and notifications assigned.",
          ""
        ],
        "def" : "hs.axuielement.observer:start() -> observerObject",
        "notes" : [
          " * This method does nothing if the observer is already running"
        ],
        "signature" : "hs.axuielement.observer:start() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "desc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.",
        "name" : "start"
      },
      {
        "doc" : "Stop observing the application; no further callbacks will be generated.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is not currently running",
        "parameters" : [
          " * None",
          ""
        ],
        "stripped_doc" : [
          "Stop observing the application; no further callbacks will be generated.",
          ""
        ],
        "def" : "hs.axuielement.observer:stop() -> observerObject",
        "notes" : [
          " * This method does nothing if the observer is not currently running"
        ],
        "signature" : "hs.axuielement.observer:stop() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "desc" : "Stop observing the application; no further callbacks will be generated.",
        "name" : "stop"
      },
      {
        "doc" : "Returns a table of the notifications currently registered with the observer.\n\nParameters:\n * `element` - an optional `hs.axuielement` to return a list of registered notifications for.\n\nReturns:\n * a table containing the currently registered notifications\n\nNotes:\n * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.\n * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element.",
        "parameters" : [
          " * `element` - an optional `hs.axuielement` to return a list of registered notifications for.",
          ""
        ],
        "stripped_doc" : [
          "Returns a table of the notifications currently registered with the observer.",
          ""
        ],
        "def" : "hs.axuielement.observer:watching([element]) -> table",
        "notes" : [
          " * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.",
          " * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element."
        ],
        "signature" : "hs.axuielement.observer:watching([element]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing the currently registered notifications",
          ""
        ],
        "desc" : "Returns a table of the notifications currently registered with the observer.",
        "name" : "watching"
      }
    ],
    "name" : "hs.axuielement.observer"
  }
]
